Return-Path: <linux-cifs-owner@vger.kernel.org>
X-Original-To: lists+linux-cifs@lfdr.de
Delivered-To: lists+linux-cifs@lfdr.de
Received: from out1.vger.email (out1.vger.email [IPv6:2620:137:e000::1:20])
	by mail.lfdr.de (Postfix) with ESMTP id 3083164FAEE
	for <lists+linux-cifs@lfdr.de>; Sat, 17 Dec 2022 17:05:31 +0100 (CET)
Received: (majordomo@vger.kernel.org) by vger.kernel.org via listexpand
        id S229504AbiLQQF1 (ORCPT <rfc822;lists+linux-cifs@lfdr.de>);
        Sat, 17 Dec 2022 11:05:27 -0500
Received: from lindbergh.monkeyblade.net ([23.128.96.19]:39014 "EHLO
        lindbergh.monkeyblade.net" rhost-flags-OK-OK-OK-OK) by vger.kernel.org
        with ESMTP id S229495AbiLQQF0 (ORCPT
        <rfc822;linux-cifs@vger.kernel.org>); Sat, 17 Dec 2022 11:05:26 -0500
Received: from mail-lj1-x235.google.com (mail-lj1-x235.google.com [IPv6:2a00:1450:4864:20::235])
        by lindbergh.monkeyblade.net (Postfix) with ESMTPS id 96E75AC
        for <linux-cifs@vger.kernel.org>; Sat, 17 Dec 2022 08:05:22 -0800 (PST)
Received: by mail-lj1-x235.google.com with SMTP id x11so5102632ljh.7
        for <linux-cifs@vger.kernel.org>; Sat, 17 Dec 2022 08:05:22 -0800 (PST)
DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=gmail.com; s=20210112;
        h=cc:to:subject:message-id:date:from:mime-version:from:to:cc:subject
         :date:message-id:reply-to;
        bh=GB7RcIsNT4E9Z9v1WgrIvzz2ZTzifsg0y5M70/pS+gs=;
        b=PfYgWhLyCIc4bldZN77XNLHYGYvUE0P0FHcmop9sIKBczSIYjT+rOcVk+y6ORR2Xy9
         fbMYVNRpMSFMHUPmhEwW1kmfA55AgXV0hl8PQWhPVFTkMqyqPFsfWQTsvVJYE6kjnB5C
         llvJdUPPDWamEueJBGJhjKGqzIgYYv83ca1mP4/7t0fKxap5L78jREmx/pK+P+lkgwUH
         PWzYdpcQv4Z7rSPnY+g7oW3CijM7s3UphoX1ZI1r/8wsIo5JXmA8wfrClIXPeqRw/miX
         no82maRVmKSUltCPAot+n9CZxWEL7n63pZRa4XkXVhUdCHC+qLKf8rD/JXCICAZ2RoDj
         lN6Q==
X-Google-DKIM-Signature: v=1; a=rsa-sha256; c=relaxed/relaxed;
        d=1e100.net; s=20210112;
        h=cc:to:subject:message-id:date:from:mime-version:x-gm-message-state
         :from:to:cc:subject:date:message-id:reply-to;
        bh=GB7RcIsNT4E9Z9v1WgrIvzz2ZTzifsg0y5M70/pS+gs=;
        b=dr/ZyNsOwtVfZCkRC7WsBDl1Hf5TMW8L03cTF8gM/+kEvh+0MXWIZsPOz15aSwyocV
         0r96vR3GMpl12eRz5d44nvkSLzbshkIYwUOVMfQO8NzitB+6bnZbMcC6PTGhpkJ4gCs2
         +3IkdpoJDUEafKi0SD3JxFqbFV315vGavhGVOlCQx7Xp4/gyuSW8EtxHN9npgIU4XJEp
         T3pZI9wOZi7PnRciRe+b4/DZMAGkeYdo2YRK40TaZfrRhEcfjBLTKRBCl9zP8Nb2p5+D
         AJTwfr/a7mV/Csx9VhaAfzW2JviORjz1ecp7XC8X0n9ljeIdWQwLvgKy0tQeKtLnCTIq
         F/Pg==
X-Gm-Message-State: AFqh2koNJ0YBIqnS8ZlUdSUs4VNVBKXByz6GSK8SAO99Y9KUK720W7xS
        2WDS19yCJd+hnZrLA3v7BrXPDBm+MlWtEoTPshytwjvFNgI=
X-Google-Smtp-Source: AMrXdXsvaWg+CtzTzyw6VaH55RCCoKMd4lEtmNX3STUtjTVy9LzW8N7p+Y+yFmP5K4eoKgUhCGhODnUxPD0a9xrC7rU=
X-Received: by 2002:a05:651c:2122:b0:27f:7d3a:d8a3 with SMTP id
 a34-20020a05651c212200b0027f7d3ad8a3mr11954ljq.518.1671293120298; Sat, 17 Dec
 2022 08:05:20 -0800 (PST)
MIME-Version: 1.0
From:   Steve French <smfrench@gmail.com>
Date:   Sat, 17 Dec 2022 10:05:09 -0600
Message-ID: <CAH2r5mv_DKLKnGENcjiazDvYJTcu5OUAgTuLynMfdB=PE-uSDg@mail.gmail.com>
Subject: DFS/reconnect fixes part 2 of 4
To:     CIFS <linux-cifs@vger.kernel.org>
Cc:     Paulo Alcantara <pc@cjr.nz>
Content-Type: multipart/mixed; boundary="000000000000c05acd05f008405d"
X-Spam-Status: No, score=-2.1 required=5.0 tests=BAYES_00,DKIM_SIGNED,
        DKIM_VALID,DKIM_VALID_AU,DKIM_VALID_EF,FREEMAIL_FROM,
        RCVD_IN_DNSWL_NONE,SPF_HELO_NONE,SPF_PASS autolearn=ham
        autolearn_force=no version=3.4.6
X-Spam-Checker-Version: SpamAssassin 3.4.6 (2021-04-09) on
        lindbergh.monkeyblade.net
Precedence: bulk
List-ID: <linux-cifs.vger.kernel.org>
X-Mailing-List: linux-cifs@vger.kernel.org

--000000000000c05acd05f008405d
Content-Type: text/plain; charset="UTF-8"

Noticed that some of the recent DFS/reconnect patches sent to the
mailing list bounced.  resending the next 3 of 13 (patches 4, 5 and 6)

-- 
Thanks,

Steve

--000000000000c05acd05f008405d
Content-Type: text/x-patch; charset="US-ASCII"; 
	name="0004-cifs-set-resolved-ip-in-sockaddr.patch"
Content-Disposition: attachment; 
	filename="0004-cifs-set-resolved-ip-in-sockaddr.patch"
Content-Transfer-Encoding: base64
Content-ID: <f_lbs4r2vj0>
X-Attachment-Id: f_lbs4r2vj0

RnJvbSBiNmJlNmI2YWQ3ZjIzYjM1ODhkMWNiNTlhYzczYzMxMDRkMmM1ZjkyIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBQYXVsbyBBbGNhbnRhcmEgPHBjQGNqci5uej4KRGF0ZTogVHVl
LCA0IE9jdCAyMDIyIDE4OjQxOjM2IC0wMzAwClN1YmplY3Q6IFtQQVRDSCAwNC8xNF0gY2lmczog
c2V0IHJlc29sdmVkIGlwIGluIHNvY2thZGRyCgpBbGwgY2FsbGVycyBmcm9tIGRuc19yZXNvbHZl
X3NlcnZlcl9uYW1lX3RvX2lwKCkgdXNlZCB0byBjb252ZXJ0IHRoZQppcCBhZGRyIHN0cmluZyBi
YWNrIHRvIHNvY2thZGRyLCBzbyBkbyB0aGF0IGluc2lkZQpkbnNfcmVzb2x2ZV9zZXJ2ZXJfbmFt
ZV90b19pcCgpIGFuZCBhdm9pZCBkdXBsaWNhdGluZyBjb2RlLgoKU2lnbmVkLW9mZi1ieTogUGF1
bG8gQWxjYW50YXJhIChTVVNFKSA8cGNAY2pyLm56PgpTaWduZWQtb2ZmLWJ5OiBTdGV2ZSBGcmVu
Y2ggPHN0ZnJlbmNoQG1pY3Jvc29mdC5jb20+Ci0tLQogZnMvY2lmcy9jb25uZWN0LmMgICAgIHwg
MjggKysrKysrKysrKystLS0tLS0tLS0tLS0tLQogZnMvY2lmcy9kZnMuYyAgICAgICAgIHwgMjQg
Ky0tLS0tLS0tLS0tLS0tLS0tLS0tCiBmcy9jaWZzL2Rmc19jYWNoZS5jICAgfCAxNyArKysrKy0t
LS0tLS0tLS0KIGZzL2NpZnMvZG5zX3Jlc29sdmUuYyB8IDQ5ICsrKysrKysrKysrKysrKysrKysr
Ky0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIGZzL2NpZnMvZG5zX3Jlc29sdmUuaCB8ICA0ICsrKy0K
IGZzL2NpZnMvbWlzYy5jICAgICAgICB8IDM2ICsrKysrKysrKy0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0KIDYgZmlsZXMgY2hhbmdlZCwgNTUgaW5zZXJ0aW9ucygrKSwgMTAzIGRlbGV0aW9ucygtKQoK
ZGlmZiAtLWdpdCBhL2ZzL2NpZnMvY29ubmVjdC5jIGIvZnMvY2lmcy9jb25uZWN0LmMKaW5kZXgg
OTRkMTc0MWNlZDIxLi5hZjM4NmM1ZjAxOWUgMTAwNjQ0Ci0tLSBhL2ZzL2NpZnMvY29ubmVjdC5j
CisrKyBiL2ZzL2NpZnMvY29ubmVjdC5jCkBAIC05MSw3ICs5MSw4IEBAIHN0YXRpYyBpbnQgcmVj
b25uX3NldF9pcGFkZHJfZnJvbV9ob3N0bmFtZShzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2
ZXIpCiB7CiAJaW50IHJjOwogCWludCBsZW47Ci0JY2hhciAqdW5jLCAqaXBhZGRyID0gTlVMTDsK
KwljaGFyICp1bmM7CisJc3RydWN0IHNvY2thZGRyX3N0b3JhZ2Ugc3M7CiAJdGltZTY0X3QgZXhw
aXJ5LCBub3c7CiAJdW5zaWduZWQgbG9uZyB0dGwgPSBTTUJfRE5TX1JFU09MVkVfSU5URVJWQUxf
REVGQVVMVDsKIApAQCAtMTExLDcgKzExMiwxMSBAQCBzdGF0aWMgaW50IHJlY29ubl9zZXRfaXBh
ZGRyX2Zyb21faG9zdG5hbWUoc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyKQogCX0KIAlz
Y25wcmludGYodW5jLCBsZW4sICJcXFxcJXMiLCBzZXJ2ZXItPmhvc3RuYW1lKTsKIAotCXJjID0g
ZG5zX3Jlc29sdmVfc2VydmVyX25hbWVfdG9faXAodW5jLCAmaXBhZGRyLCAmZXhwaXJ5KTsKKwlz
cGluX2xvY2soJnNlcnZlci0+c3J2X2xvY2spOworCXNzID0gc2VydmVyLT5kc3RhZGRyOworCXNw
aW5fdW5sb2NrKCZzZXJ2ZXItPnNydl9sb2NrKTsKKworCXJjID0gZG5zX3Jlc29sdmVfc2VydmVy
X25hbWVfdG9faXAodW5jLCAoc3RydWN0IHNvY2thZGRyICopJnNzLCAmZXhwaXJ5KTsKIAlrZnJl
ZSh1bmMpOwogCiAJaWYgKHJjIDwgMCkgewpAQCAtMTIxLDIyICsxMjYsMTMgQEAgc3RhdGljIGlu
dCByZWNvbm5fc2V0X2lwYWRkcl9mcm9tX2hvc3RuYW1lKHN0cnVjdCBUQ1BfU2VydmVyX0luZm8g
KnNlcnZlcikKIAl9CiAKIAlzcGluX2xvY2soJnNlcnZlci0+c3J2X2xvY2spOwotCXJjID0gY2lm
c19jb252ZXJ0X2FkZHJlc3MoKHN0cnVjdCBzb2NrYWRkciAqKSZzZXJ2ZXItPmRzdGFkZHIsIGlw
YWRkciwKLQkJCQkgIHN0cmxlbihpcGFkZHIpKTsKKwltZW1jcHkoJnNlcnZlci0+ZHN0YWRkciwg
JnNzLCBzaXplb2Yoc2VydmVyLT5kc3RhZGRyKSk7CiAJc3Bpbl91bmxvY2soJnNlcnZlci0+c3J2
X2xvY2spOwotCWtmcmVlKGlwYWRkcik7CiAKLQkvKiByYyA9PSAxIG1lYW5zIHN1Y2Nlc3MgaGVy
ZSAqLwotCWlmIChyYykgewotCQlub3cgPSBrdGltZV9nZXRfcmVhbF9zZWNvbmRzKCk7Ci0JCWlm
IChleHBpcnkgJiYgZXhwaXJ5ID4gbm93KQotCQkJLyoKLQkJCSAqIFRvIG1ha2Ugc3VyZSB3ZSBk
b24ndCB1c2UgdGhlIGNhY2hlZCBlbnRyeSwgcmV0cnkgMXMKLQkJCSAqIGFmdGVyIGV4cGlyeS4K
LQkJCSAqLwotCQkJdHRsID0gbWF4X3QodW5zaWduZWQgbG9uZywgZXhwaXJ5IC0gbm93LCBTTUJf
RE5TX1JFU09MVkVfSU5URVJWQUxfTUlOKSArIDE7Ci0JfQotCXJjID0gIXJjID8gLTEgOiAwOwor
CW5vdyA9IGt0aW1lX2dldF9yZWFsX3NlY29uZHMoKTsKKwlpZiAoZXhwaXJ5ICYmIGV4cGlyeSA+
IG5vdykKKwkJLyogVG8gbWFrZSBzdXJlIHdlIGRvbid0IHVzZSB0aGUgY2FjaGVkIGVudHJ5LCBy
ZXRyeSAxcyAqLworCQl0dGwgPSBtYXhfdCh1bnNpZ25lZCBsb25nLCBleHBpcnkgLSBub3csIFNN
Ql9ETlNfUkVTT0xWRV9JTlRFUlZBTF9NSU4pICsgMTsKIAogcmVxdWV1ZV9yZXNvbHZlOgogCWNp
ZnNfZGJnKEZZSSwgIiVzOiBuZXh0IGRucyByZXNvbHV0aW9uIHNjaGVkdWxlZCBmb3IgJWx1IHNl
Y29uZHMgaW4gdGhlIGZ1dHVyZVxuIiwKZGlmZiAtLWdpdCBhL2ZzL2NpZnMvZGZzLmMgYi9mcy9j
aWZzL2Rmcy5jCmluZGV4IDBiMTVkN2U5ZjgxOC4uY2UyMTQzOGNhZGVjIDEwMDY0NAotLS0gYS9m
cy9jaWZzL2Rmcy5jCisrKyBiL2ZzL2NpZnMvZGZzLmMKQEAgLTksMjggKzksNiBAQAogI2luY2x1
ZGUgImZzX2NvbnRleHQuaCIKICNpbmNsdWRlICJkZnMuaCIKIAotLyogUmVzb2x2ZSBVTkMgc2Vy
dmVyIG5hbWUgYW5kIHNldCBkZXN0aW5hdGlvbiBpcCBhZGRyZXNzIGluIGZzIGNvbnRleHQgKi8K
LXN0YXRpYyBpbnQgcmVzb2x2ZV91bmMoY29uc3QgY2hhciAqcGF0aCwgc3RydWN0IHNtYjNfZnNf
Y29udGV4dCAqY3R4KQotewotCWludCByYzsKLQljaGFyICppcCA9IE5VTEw7Ci0KLQlyYyA9IGRu
c19yZXNvbHZlX3NlcnZlcl9uYW1lX3RvX2lwKHBhdGgsICZpcCwgTlVMTCk7Ci0JaWYgKHJjIDwg
MCkgewotCQljaWZzX2RiZyhGWUksICIlczogZmFpbGVkIHRvIHJlc29sdmUgVU5DIHNlcnZlciBu
YW1lOiAlZFxuIiwgX19mdW5jX18sIHJjKTsKLQkJcmV0dXJuIHJjOwotCX0KLQotCWlmICghY2lm
c19jb252ZXJ0X2FkZHJlc3MoKHN0cnVjdCBzb2NrYWRkciAqKSZjdHgtPmRzdGFkZHIsIGlwLCBz
dHJsZW4oaXApKSkgewotCQljaWZzX2RiZyhWRlMsICIlczogY291bGQgbm90IGRldGVybWluYXRl
IGRlc3RpbmF0aW9uIGFkZHJlc3NcbiIsIF9fZnVuY19fKTsKLQkJcmMgPSAtRUhPU1RVTlJFQUNI
OwotCX0gZWxzZQotCQlyYyA9IDA7Ci0KLQlrZnJlZShpcCk7Ci0JcmV0dXJuIHJjOwotfQotCiAv
KioKICAqIGRmc19wYXJzZV90YXJnZXRfcmVmZXJyYWwgLSBzZXQgZnMgY29udGV4dCBmb3IgZGZz
IHRhcmdldCByZWZlcnJhbAogICoKQEAgLTY4LDcgKzQ2LDcgQEAgaW50IGRmc19wYXJzZV90YXJn
ZXRfcmVmZXJyYWwoY29uc3QgY2hhciAqZnVsbF9wYXRoLCBjb25zdCBzdHJ1Y3QgZGZzX2luZm8z
X3BhcmEKIAlpZiAocmMpCiAJCWdvdG8gb3V0OwogCi0JcmMgPSByZXNvbHZlX3VuYyhwYXRoLCBj
dHgpOworCXJjID0gZG5zX3Jlc29sdmVfc2VydmVyX25hbWVfdG9faXAocGF0aCwgKHN0cnVjdCBz
b2NrYWRkciAqKSZjdHgtPmRzdGFkZHIsIE5VTEwpOwogCiBvdXQ6CiAJa2ZyZWUocGF0aCk7CmRp
ZmYgLS1naXQgYS9mcy9jaWZzL2Rmc19jYWNoZS5jIGIvZnMvY2lmcy9kZnNfY2FjaGUuYwppbmRl
eCBlNzA5MTVhZDc1NDEuLjE3YjZkNTMzYzk2NiAxMDA2NDQKLS0tIGEvZnMvY2lmcy9kZnNfY2Fj
aGUuYworKysgYi9mcy9jaWZzL2Rmc19jYWNoZS5jCkBAIC0xMzE0LDggKzEzMTQsNyBAQCBzdGF0
aWMgYm9vbCB0YXJnZXRfc2hhcmVfZXF1YWwoc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVy
LCBjb25zdCBjaGFyICpzMSwgYwogCWNoYXIgdW5jW3NpemVvZigiXFxcXCIpICsgU0VSVkVSX05B
TUVfTEVOR1RIXSA9IHswfTsKIAljb25zdCBjaGFyICpob3N0OwogCXNpemVfdCBob3N0bGVuOwot
CWNoYXIgKmlwID0gTlVMTDsKLQlzdHJ1Y3Qgc29ja2FkZHIgc2E7CisJc3RydWN0IHNvY2thZGRy
X3N0b3JhZ2Ugc3M7CiAJYm9vbCBtYXRjaDsKIAlpbnQgcmM7CiAKQEAgLTEzMzAsMjMgKzEzMjks
MTcgQEAgc3RhdGljIGJvb2wgdGFyZ2V0X3NoYXJlX2VxdWFsKHN0cnVjdCBUQ1BfU2VydmVyX0lu
Zm8gKnNlcnZlciwgY29uc3QgY2hhciAqczEsIGMKIAlleHRyYWN0X3VuY19ob3N0bmFtZShzMSwg
Jmhvc3QsICZob3N0bGVuKTsKIAlzY25wcmludGYodW5jLCBzaXplb2YodW5jKSwgIlxcXFwlLipz
IiwgKGludClob3N0bGVuLCBob3N0KTsKIAotCXJjID0gZG5zX3Jlc29sdmVfc2VydmVyX25hbWVf
dG9faXAodW5jLCAmaXAsIE5VTEwpOworCXJjID0gZG5zX3Jlc29sdmVfc2VydmVyX25hbWVfdG9f
aXAodW5jLCAoc3RydWN0IHNvY2thZGRyICopJnNzLCBOVUxMKTsKIAlpZiAocmMgPCAwKSB7CiAJ
CWNpZnNfZGJnKEZZSSwgIiVzOiBjb3VsZCBub3QgcmVzb2x2ZSAlLipzLiBhc3N1bWluZyBzZXJ2
ZXIgYWRkcmVzcyBtYXRjaGVzLlxuIiwKIAkJCSBfX2Z1bmNfXywgKGludClob3N0bGVuLCBob3N0
KTsKIAkJcmV0dXJuIHRydWU7CiAJfQogCi0JaWYgKCFjaWZzX2NvbnZlcnRfYWRkcmVzcygmc2Es
IGlwLCBzdHJsZW4oaXApKSkgewotCQljaWZzX2RiZyhWRlMsICIlczogZmFpbGVkIHRvIGNvbnZl
cnQgYWRkcmVzcyBcJyVzXCcuIHNraXAgYWRkcmVzcyBtYXRjaGluZy5cbiIsCi0JCQkgX19mdW5j
X18sIGlwKTsKLQl9IGVsc2UgewotCQljaWZzX3NlcnZlcl9sb2NrKHNlcnZlcik7Ci0JCW1hdGNo
ID0gY2lmc19tYXRjaF9pcGFkZHIoKHN0cnVjdCBzb2NrYWRkciAqKSZzZXJ2ZXItPmRzdGFkZHIs
ICZzYSk7Ci0JCWNpZnNfc2VydmVyX3VubG9jayhzZXJ2ZXIpOwotCX0KKwljaWZzX3NlcnZlcl9s
b2NrKHNlcnZlcik7CisJbWF0Y2ggPSBjaWZzX21hdGNoX2lwYWRkcigoc3RydWN0IHNvY2thZGRy
ICopJnNlcnZlci0+ZHN0YWRkciwgKHN0cnVjdCBzb2NrYWRkciAqKSZzcyk7CisJY2lmc19zZXJ2
ZXJfdW5sb2NrKHNlcnZlcik7CiAKLQlrZnJlZShpcCk7CiAJcmV0dXJuIG1hdGNoOwogfQogCmRp
ZmYgLS1naXQgYS9mcy9jaWZzL2Ruc19yZXNvbHZlLmMgYi9mcy9jaWZzL2Ruc19yZXNvbHZlLmMK
aW5kZXggMDQ1OGQyOGQ3MWFhLi44YmY4OTc4YmM1ZDYgMTAwNjQ0Ci0tLSBhL2ZzL2NpZnMvZG5z
X3Jlc29sdmUuYworKysgYi9mcy9jaWZzL2Ruc19yZXNvbHZlLmMKQEAgLTEyLDYgKzEyLDcgQEAK
ICAqCiAgKi8KIAorI2luY2x1ZGUgPGxpbnV4L2luZXQuaD4KICNpbmNsdWRlIDxsaW51eC9zbGFi
Lmg+CiAjaW5jbHVkZSA8bGludXgvZG5zX3Jlc29sdmVyLmg+CiAjaW5jbHVkZSAiZG5zX3Jlc29s
dmUuaCIKQEAgLTI1LDE3ICsyNiwxMyBAQAogICogQGlwX2FkZHI6IFdoZXJlIHRvIHJldHVybiB0
aGUgSVAgYWRkcmVzcy4KICAqIEBleHBpcnk6IFdoZXJlIHRvIHJldHVybiB0aGUgZXhwaXJ5IHRp
bWUgZm9yIHRoZSBkbnMgcmVjb3JkLgogICoKLSAqIFRoZSBJUCBhZGRyZXNzIHdpbGwgYmUgcmV0
dXJuZWQgaW4gc3RyaW5nIGZvcm0sIGFuZCB0aGUgY2FsbGVyIGlzCi0gKiByZXNwb25zaWJsZSBm
b3IgZnJlZWluZyBpdC4KLSAqCi0gKiBSZXR1cm5zIGxlbmd0aCBvZiByZXN1bHQgb24gc3VjY2Vz
cywgLXZlIG9uIGVycm9yLgorICogUmV0dXJucyB6ZXJvIHN1Y2Nlc3MsIC12ZSBvbiBlcnJvci4K
ICAqLwogaW50Ci1kbnNfcmVzb2x2ZV9zZXJ2ZXJfbmFtZV90b19pcChjb25zdCBjaGFyICp1bmMs
IGNoYXIgKippcF9hZGRyLCB0aW1lNjRfdCAqZXhwaXJ5KQorZG5zX3Jlc29sdmVfc2VydmVyX25h
bWVfdG9faXAoY29uc3QgY2hhciAqdW5jLCBzdHJ1Y3Qgc29ja2FkZHIgKmlwX2FkZHIsIHRpbWU2
NF90ICpleHBpcnkpCiB7Ci0Jc3RydWN0IHNvY2thZGRyX3N0b3JhZ2Ugc3M7CiAJY29uc3QgY2hh
ciAqaG9zdG5hbWUsICpzZXA7Ci0JY2hhciAqbmFtZTsKKwljaGFyICppcDsKIAlpbnQgbGVuLCBy
YzsKIAogCWlmICghaXBfYWRkciB8fCAhdW5jKQpAQCAtNjAsMzAgKzU3LDMyIEBAIGRuc19yZXNv
bHZlX3NlcnZlcl9uYW1lX3RvX2lwKGNvbnN0IGNoYXIgKnVuYywgY2hhciAqKmlwX2FkZHIsIHRp
bWU2NF90ICpleHBpcnkpCiAJCQkgX19mdW5jX18sIHVuYyk7CiAKIAkvKiBUcnkgdG8gaW50ZXJw
cmV0IGhvc3RuYW1lIGFzIGFuIElQdjQgb3IgSVB2NiBhZGRyZXNzICovCi0JcmMgPSBjaWZzX2Nv
bnZlcnRfYWRkcmVzcygoc3RydWN0IHNvY2thZGRyICopJnNzLCBob3N0bmFtZSwgbGVuKTsKLQlp
ZiAocmMgPiAwKQotCQlnb3RvIG5hbWVfaXNfSVBfYWRkcmVzczsKKwlyYyA9IGNpZnNfY29udmVy
dF9hZGRyZXNzKGlwX2FkZHIsIGhvc3RuYW1lLCBsZW4pOworCWlmIChyYyA+IDApIHsKKwkJY2lm
c19kYmcoRllJLCAiJXM6IHVuYyBpcyBJUCwgc2tpcHBpbmcgZG5zIHVwY2FsbDogJSouKnNcbiIs
IF9fZnVuY19fLCBsZW4sIGxlbiwKKwkJCSBob3N0bmFtZSk7CisJCXJldHVybiAwOworCX0KIAog
CS8qIFBlcmZvcm0gdGhlIHVwY2FsbCAqLwogCXJjID0gZG5zX3F1ZXJ5KGN1cnJlbnQtPm5zcHJv
eHktPm5ldF9ucywgTlVMTCwgaG9zdG5hbWUsIGxlbiwKLQkJICAgICAgIE5VTEwsIGlwX2FkZHIs
IGV4cGlyeSwgZmFsc2UpOwotCWlmIChyYyA8IDApCisJCSAgICAgICBOVUxMLCAmaXAsIGV4cGly
eSwgZmFsc2UpOworCWlmIChyYyA8IDApIHsKIAkJY2lmc19kYmcoRllJLCAiJXM6IHVuYWJsZSB0
byByZXNvbHZlOiAlKi4qc1xuIiwKIAkJCSBfX2Z1bmNfXywgbGVuLCBsZW4sIGhvc3RuYW1lKTsK
LQllbHNlCisJfSBlbHNlIHsKIAkJY2lmc19kYmcoRllJLCAiJXM6IHJlc29sdmVkOiAlKi4qcyB0
byAlcyBleHBpcnkgJWxsdVxuIiwKLQkJCSBfX2Z1bmNfXywgbGVuLCBsZW4sIGhvc3RuYW1lLCAq
aXBfYWRkciwKKwkJCSBfX2Z1bmNfXywgbGVuLCBsZW4sIGhvc3RuYW1lLCBpcCwKIAkJCSBleHBp
cnkgPyAoKmV4cGlyeSkgOiAwKTsKLQlyZXR1cm4gcmM7CiAKLW5hbWVfaXNfSVBfYWRkcmVzczoK
LQluYW1lID0ga21hbGxvYyhsZW4gKyAxLCBHRlBfS0VSTkVMKTsKLQlpZiAoIW5hbWUpCi0JCXJl
dHVybiAtRU5PTUVNOwotCW1lbWNweShuYW1lLCBob3N0bmFtZSwgbGVuKTsKLQluYW1lW2xlbl0g
PSAwOwotCWNpZnNfZGJnKEZZSSwgIiVzOiB1bmMgaXMgSVAsIHNraXBwaW5nIGRucyB1cGNhbGw6
ICVzXG4iLAotCQkgX19mdW5jX18sIG5hbWUpOwotCSppcF9hZGRyID0gbmFtZTsKLQlyZXR1cm4g
MDsKKwkJcmMgPSBjaWZzX2NvbnZlcnRfYWRkcmVzcyhpcF9hZGRyLCBpcCwgc3RybGVuKGlwKSk7
CisJCWtmcmVlKGlwKTsKKworCQlpZiAoIXJjKSB7CisJCQljaWZzX2RiZyhGWUksICIlczogdW5h
YmxlIHRvIGRldGVybWluZSBpcCBhZGRyZXNzXG4iLCBfX2Z1bmNfXyk7CisJCQlyYyA9IC1FSE9T
VFVOUkVBQ0g7CisJCX0gZWxzZQorCQkJcmMgPSAwOworCX0KKwlyZXR1cm4gcmM7CiB9CmRpZmYg
LS1naXQgYS9mcy9jaWZzL2Ruc19yZXNvbHZlLmggYi9mcy9jaWZzL2Ruc19yZXNvbHZlLmgKaW5k
ZXggYWZjMGRmMzgxMjQ2Li42ZWIwYzE1YTI0NDAgMTAwNjQ0Ci0tLSBhL2ZzL2NpZnMvZG5zX3Jl
c29sdmUuaAorKysgYi9mcy9jaWZzL2Ruc19yZXNvbHZlLmgKQEAgLTExLDggKzExLDEwIEBACiAj
aWZuZGVmIF9ETlNfUkVTT0xWRV9ICiAjZGVmaW5lIF9ETlNfUkVTT0xWRV9ICiAKKyNpbmNsdWRl
IDxsaW51eC9uZXQuaD4KKwogI2lmZGVmIF9fS0VSTkVMX18KLWV4dGVybiBpbnQgZG5zX3Jlc29s
dmVfc2VydmVyX25hbWVfdG9faXAoY29uc3QgY2hhciAqdW5jLCBjaGFyICoqaXBfYWRkciwgdGlt
ZTY0X3QgKmV4cGlyeSk7CitpbnQgZG5zX3Jlc29sdmVfc2VydmVyX25hbWVfdG9faXAoY29uc3Qg
Y2hhciAqdW5jLCBzdHJ1Y3Qgc29ja2FkZHIgKmlwX2FkZHIsIHRpbWU2NF90ICpleHBpcnkpOwog
I2VuZGlmIC8qIEtFUk5FTCAqLwogCiAjZW5kaWYgLyogX0ROU19SRVNPTFZFX0ggKi8KZGlmZiAt
LWdpdCBhL2ZzL2NpZnMvbWlzYy5jIGIvZnMvY2lmcy9taXNjLmMKaW5kZXggMDYyMTc1OTk0ZTg3
Li40ZDNjNTg2Nzg1YTUgMTAwNjQ0Ci0tLSBhL2ZzL2NpZnMvbWlzYy5jCisrKyBiL2ZzL2NpZnMv
bWlzYy5jCkBAIC0xMjU4LDQ0ICsxMjU4LDI4IEBAIGludCBtYXRjaF90YXJnZXRfaXAoc3RydWN0
IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyLAogCQkgICAgYm9vbCAqcmVzdWx0KQogewogCWludCBy
YzsKLQljaGFyICp0YXJnZXQsICp0aXAgPSBOVUxMOwotCXN0cnVjdCBzb2NrYWRkciB0aXBhZGRy
OworCWNoYXIgKnRhcmdldDsKKwlzdHJ1Y3Qgc29ja2FkZHJfc3RvcmFnZSBzczsKIAogCSpyZXN1
bHQgPSBmYWxzZTsKIAogCXRhcmdldCA9IGt6YWxsb2Moc2hhcmVfbGVuICsgMywgR0ZQX0tFUk5F
TCk7Ci0JaWYgKCF0YXJnZXQpIHsKLQkJcmMgPSAtRU5PTUVNOwotCQlnb3RvIG91dDsKLQl9CisJ
aWYgKCF0YXJnZXQpCisJCXJldHVybiAtRU5PTUVNOwogCiAJc2NucHJpbnRmKHRhcmdldCwgc2hh
cmVfbGVuICsgMywgIlxcXFwlLipzIiwgKGludClzaGFyZV9sZW4sIHNoYXJlKTsKIAogCWNpZnNf
ZGJnKEZZSSwgIiVzOiB0YXJnZXQgbmFtZTogJXNcbiIsIF9fZnVuY19fLCB0YXJnZXQgKyAyKTsK
IAotCXJjID0gZG5zX3Jlc29sdmVfc2VydmVyX25hbWVfdG9faXAodGFyZ2V0LCAmdGlwLCBOVUxM
KTsKLQlpZiAocmMgPCAwKQotCQlnb3RvIG91dDsKLQotCWNpZnNfZGJnKEZZSSwgIiVzOiB0YXJn
ZXQgaXA6ICVzXG4iLCBfX2Z1bmNfXywgdGlwKTsKKwlyYyA9IGRuc19yZXNvbHZlX3NlcnZlcl9u
YW1lX3RvX2lwKHRhcmdldCwgKHN0cnVjdCBzb2NrYWRkciAqKSZzcywgTlVMTCk7CisJa2ZyZWUo
dGFyZ2V0KTsKIAotCWlmICghY2lmc19jb252ZXJ0X2FkZHJlc3MoJnRpcGFkZHIsIHRpcCwgc3Ry
bGVuKHRpcCkpKSB7Ci0JCWNpZnNfZGJnKFZGUywgIiVzOiBmYWlsZWQgdG8gY29udmVydCB0YXJn
ZXQgaXAgYWRkcmVzc1xuIiwKLQkJCSBfX2Z1bmNfXyk7Ci0JCXJjID0gLUVJTlZBTDsKLQkJZ290
byBvdXQ7Ci0JfQorCWlmIChyYyA8IDApCisJCXJldHVybiByYzsKIAotCSpyZXN1bHQgPSBjaWZz
X21hdGNoX2lwYWRkcigoc3RydWN0IHNvY2thZGRyICopJnNlcnZlci0+ZHN0YWRkciwKLQkJCQkg
ICAgJnRpcGFkZHIpOworCSpyZXN1bHQgPSBjaWZzX21hdGNoX2lwYWRkcigoc3RydWN0IHNvY2th
ZGRyICopJnNlcnZlci0+ZHN0YWRkciwgKHN0cnVjdCBzb2NrYWRkciAqKSZzcyk7CiAJY2lmc19k
YmcoRllJLCAiJXM6IGlwIGFkZHJlc3NlcyBtYXRjaDogJXVcbiIsIF9fZnVuY19fLCAqcmVzdWx0
KTsKLQlyYyA9IDA7Ci0KLW91dDoKLQlrZnJlZSh0YXJnZXQpOwotCWtmcmVlKHRpcCk7Ci0KLQly
ZXR1cm4gcmM7CisJcmV0dXJuIDA7CiB9CiAKIGludCBjaWZzX3VwZGF0ZV9zdXBlcl9wcmVwYXRo
KHN0cnVjdCBjaWZzX3NiX2luZm8gKmNpZnNfc2IsIGNoYXIgKnByZWZpeCkKLS0gCjIuMzQuMQoK
--000000000000c05acd05f008405d
Content-Type: text/x-patch; charset="US-ASCII"; 
	name="0005-cifs-split-out-ses-and-tcon-retrieval-from-mount_get.patch"
Content-Disposition: attachment; 
	filename="0005-cifs-split-out-ses-and-tcon-retrieval-from-mount_get.patch"
Content-Transfer-Encoding: base64
Content-ID: <f_lbs4r6sx1>
X-Attachment-Id: f_lbs4r6sx1

RnJvbSAwZjQwYjc0NjM4ZTY2MTU4Nzk0ODkyMzM5NWRlOTI1ODFjNWJiYjVhIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBQYXVsbyBBbGNhbnRhcmEgPHBjQGNqci5uej4KRGF0ZTogVHVl
LCAxMSBPY3QgMjAyMiAxODoxNjowNyAtMDMwMApTdWJqZWN0OiBbUEFUQ0ggMDUvMTRdIGNpZnM6
IHNwbGl0IG91dCBzZXMgYW5kIHRjb24gcmV0cmlldmFsIGZyb20KIG1vdW50X2dldF9jb25ucygp
CgpJbnRyb2R1Y2UgYW5kIGV4cG9ydCB0d28gaGVscGVycyBmb3IgZ2V0dGluZyBzZXNzaW9uIGFu
ZCB0Y29uIGR1cmluZwptb3VudCgyKS4gIFRob3NlIHdpbGwgYmUgdXNlZCBieSBkZnMgd2hlbiBy
ZXRyaWV2aW5nIHNlc3Npb25zIGFuZAp0Y29ucyBzZXBhcmF0ZWx5IHdoaWxlIGNoYXNpbmcgcmVm
ZXJyYWxzLiAgQmVzaWRlcywgZXhwb3J0CmNpZnNfbW91bnRfY3R4IHN0cnVjdHVyZSBhcyBpdCB3
aWxsIGJlIHVzZWQgYnkgZGZzIGNvZGUgYXMgd2VsbC4KCk5vIGZ1bmN0aW9uYWwgY2hhbmdlcy4K
ClNpZ25lZC1vZmYtYnk6IFBhdWxvIEFsY2FudGFyYSAoU1VTRSkgPHBjQGNqci5uej4KU2lnbmVk
LW9mZi1ieTogU3RldmUgRnJlbmNoIDxzdGZyZW5jaEBtaWNyb3NvZnQuY29tPgotLS0KIGZzL2Np
ZnMvY2lmc2dsb2IuaCAgfCAgMTQgKysrKysrCiBmcy9jaWZzL2NpZnNwcm90by5oIHwgICAyICsK
IGZzL2NpZnMvY29ubmVjdC5jICAgfCAxMDEgKysrKysrKysrKysrKysrKysrKysrKysrKysrLS0t
LS0tLS0tLS0tLS0tLS0KIDMgZmlsZXMgY2hhbmdlZCwgNzggaW5zZXJ0aW9ucygrKSwgMzkgZGVs
ZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvZnMvY2lmcy9jaWZzZ2xvYi5oIGIvZnMvY2lmcy9jaWZz
Z2xvYi5oCmluZGV4IDgyZjJkMzA3MGMyNi4uNzk5ZTY0NDI3ZmRlIDEwMDY0NAotLS0gYS9mcy9j
aWZzL2NpZnNnbG9iLmgKKysrIGIvZnMvY2lmcy9jaWZzZ2xvYi5oCkBAIC0xNzYwLDYgKzE3NjAs
MjAgQEAgc3RydWN0IGZpbGVfbGlzdCB7CiAJc3RydWN0IGNpZnNGaWxlSW5mbyAqY2ZpbGU7CiB9
OwogCitzdHJ1Y3QgY2lmc19tb3VudF9jdHggeworCXN0cnVjdCBjaWZzX3NiX2luZm8gKmNpZnNf
c2I7CisJc3RydWN0IHNtYjNfZnNfY29udGV4dCAqZnNfY3R4OworCXVuc2lnbmVkIGludCB4aWQ7
CisJc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyOworCXN0cnVjdCBjaWZzX3NlcyAqc2Vz
OworCXN0cnVjdCBjaWZzX3Rjb24gKnRjb247CisjaWZkZWYgQ09ORklHX0NJRlNfREZTX1VQQ0FM
TAorCXN0cnVjdCBjaWZzX3NlcyAqcm9vdF9zZXM7CisJdXVpZF90IG1vdW50X2lkOworCWNoYXIg
Km9yaWdpbl9mdWxscGF0aCwgKmxlYWZfZnVsbHBhdGg7CisjZW5kaWYKK307CisKIHN0YXRpYyBp
bmxpbmUgdm9pZCBmcmVlX2Rmc19pbmZvX3BhcmFtKHN0cnVjdCBkZnNfaW5mbzNfcGFyYW0gKnBh
cmFtKQogewogCWlmIChwYXJhbSkgewpkaWZmIC0tZ2l0IGEvZnMvY2lmcy9jaWZzcHJvdG8uaCBi
L2ZzL2NpZnMvY2lmc3Byb3RvLmgKaW5kZXggNGIxZjczMTVjYTE2Li40YWUzZTgzNzU5NDEgMTAw
NjQ0Ci0tLSBhL2ZzL2NpZnMvY2lmc3Byb3RvLmgKKysrIGIvZnMvY2lmcy9jaWZzcHJvdG8uaApA
QCAtMjQyLDYgKzI0Miw4IEBAIGV4dGVybiBpbnQgY2lmc19yZWFkX3BhZ2VfZnJvbV9zb2NrZXQo
c3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyLAogCQkJCQl1bnNpZ25lZCBpbnQgcGFnZV9v
ZmZzZXQsCiAJCQkJCXVuc2lnbmVkIGludCB0b19yZWFkKTsKIGV4dGVybiBpbnQgY2lmc19zZXR1
cF9jaWZzX3NiKHN0cnVjdCBjaWZzX3NiX2luZm8gKmNpZnNfc2IpOworaW50IGNpZnNfbW91bnRf
Z2V0X3Nlc3Npb24oc3RydWN0IGNpZnNfbW91bnRfY3R4ICptbnRfY3R4KTsKK2ludCBjaWZzX21v
dW50X2dldF90Y29uKHN0cnVjdCBjaWZzX21vdW50X2N0eCAqbW50X2N0eCk7CiBleHRlcm4gaW50
IGNpZnNfbWF0Y2hfc3VwZXIoc3RydWN0IHN1cGVyX2Jsb2NrICosIHZvaWQgKik7CiBleHRlcm4g
aW50IGNpZnNfbW91bnQoc3RydWN0IGNpZnNfc2JfaW5mbyAqY2lmc19zYiwgc3RydWN0IHNtYjNf
ZnNfY29udGV4dCAqY3R4KTsKIGV4dGVybiB2b2lkIGNpZnNfdW1vdW50KHN0cnVjdCBjaWZzX3Ni
X2luZm8gKik7CmRpZmYgLS1naXQgYS9mcy9jaWZzL2Nvbm5lY3QuYyBiL2ZzL2NpZnMvY29ubmVj
dC5jCmluZGV4IGFmMzg2YzVmMDE5ZS4uNWU0NjUwMjU3MDhkIDEwMDY0NAotLS0gYS9mcy9jaWZz
L2Nvbm5lY3QuYworKysgYi9mcy9jaWZzL2Nvbm5lY3QuYwpAQCAtNjIsMjAgKzYyLDYgQEAgZXh0
ZXJuIGJvb2wgZGlzYWJsZV9sZWdhY3lfZGlhbGVjdHM7CiAvKiBEcm9wIHRoZSBjb25uZWN0aW9u
IHRvIG5vdCBvdmVybG9hZCB0aGUgc2VydmVyICovCiAjZGVmaW5lIE5VTV9TVEFUVVNfSU9fVElN
RU9VVCAgIDUKIAotc3RydWN0IG1vdW50X2N0eCB7Ci0Jc3RydWN0IGNpZnNfc2JfaW5mbyAqY2lm
c19zYjsKLQlzdHJ1Y3Qgc21iM19mc19jb250ZXh0ICpmc19jdHg7Ci0JdW5zaWduZWQgaW50IHhp
ZDsKLQlzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXI7Ci0Jc3RydWN0IGNpZnNfc2VzICpz
ZXM7Ci0Jc3RydWN0IGNpZnNfdGNvbiAqdGNvbjsKLSNpZmRlZiBDT05GSUdfQ0lGU19ERlNfVVBD
QUxMCi0Jc3RydWN0IGNpZnNfc2VzICpyb290X3NlczsKLQl1dWlkX3QgbW91bnRfaWQ7Ci0JY2hh
ciAqb3JpZ2luX2Z1bGxwYXRoLCAqbGVhZl9mdWxscGF0aDsKLSNlbmRpZgotfTsKLQogc3RhdGlj
IGludCBpcF9jb25uZWN0KHN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlcik7CiBzdGF0aWMg
aW50IGdlbmVyaWNfaXBfY29ubmVjdChzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIpOwog
c3RhdGljIHZvaWQgdGxpbmtfcmJfaW5zZXJ0KHN0cnVjdCByYl9yb290ICpyb290LCBzdHJ1Y3Qg
dGNvbl9saW5rICpuZXdfdGxpbmspOwpAQCAtMzE5MSw3ICszMTc3LDcgQEAgaW50IGNpZnNfc2V0
dXBfY2lmc19zYihzdHJ1Y3QgY2lmc19zYl9pbmZvICpjaWZzX3NiKQogfQogCiAvKiBSZWxlYXNl
IGFsbCBzdWNjZWVkIGNvbm5lY3Rpb25zICovCi1zdGF0aWMgaW5saW5lIHZvaWQgbW91bnRfcHV0
X2Nvbm5zKHN0cnVjdCBtb3VudF9jdHggKm1udF9jdHgpCitzdGF0aWMgaW5saW5lIHZvaWQgbW91
bnRfcHV0X2Nvbm5zKHN0cnVjdCBjaWZzX21vdW50X2N0eCAqbW50X2N0eCkKIHsKIAlpbnQgcmMg
PSAwOwogCkBAIC0zMjA1LDE5ICszMTkxLDIyIEBAIHN0YXRpYyBpbmxpbmUgdm9pZCBtb3VudF9w
dXRfY29ubnMoc3RydWN0IG1vdW50X2N0eCAqbW50X2N0eCkKIAlmcmVlX3hpZChtbnRfY3R4LT54
aWQpOwogfQogCi0vKiBHZXQgY29ubmVjdGlvbnMgZm9yIHRjcCwgc2VzIGFuZCB0Y29uICovCi1z
dGF0aWMgaW50IG1vdW50X2dldF9jb25ucyhzdHJ1Y3QgbW91bnRfY3R4ICptbnRfY3R4KQoraW50
IGNpZnNfbW91bnRfZ2V0X3Nlc3Npb24oc3RydWN0IGNpZnNfbW91bnRfY3R4ICptbnRfY3R4KQog
ewotCWludCByYyA9IDA7CiAJc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyID0gTlVMTDsK
KwlzdHJ1Y3Qgc21iM19mc19jb250ZXh0ICpjdHg7CiAJc3RydWN0IGNpZnNfc2VzICpzZXMgPSBO
VUxMOwotCXN0cnVjdCBjaWZzX3Rjb24gKnRjb24gPSBOVUxMOwotCXN0cnVjdCBzbWIzX2ZzX2Nv
bnRleHQgKmN0eCA9IG1udF9jdHgtPmZzX2N0eDsKLQlzdHJ1Y3QgY2lmc19zYl9pbmZvICpjaWZz
X3NiID0gbW50X2N0eC0+Y2lmc19zYjsKIAl1bnNpZ25lZCBpbnQgeGlkOworCWludCByYyA9IDA7
CiAKIAl4aWQgPSBnZXRfeGlkKCk7CiAKKwlpZiAoV0FSTl9PTl9PTkNFKCFtbnRfY3R4IHx8ICFt
bnRfY3R4LT5mc19jdHgpKSB7CisJCXJjID0gLUVJTlZBTDsKKwkJZ290byBvdXQ7CisJfQorCWN0
eCA9IG1udF9jdHgtPmZzX2N0eDsKKwogCS8qIGdldCBhIHJlZmVyZW5jZSB0byBhIHRjcCBzZXNz
aW9uICovCiAJc2VydmVyID0gY2lmc19nZXRfdGNwX3Nlc3Npb24oY3R4LCBOVUxMKTsKIAlpZiAo
SVNfRVJSKHNlcnZlcikpIHsKQEAgLTMyMzgsMTEgKzMyMjcsMzYgQEAgc3RhdGljIGludCBtb3Vu
dF9nZXRfY29ubnMoc3RydWN0IG1vdW50X2N0eCAqbW50X2N0eCkKIAkJCQkJICAgIFNNQjJfR0xP
QkFMX0NBUF9QRVJTSVNURU5UX0hBTkRMRVMpKSkgewogCQljaWZzX3NlcnZlcl9kYmcoVkZTLCAi
cGVyc2lzdGVudCBoYW5kbGVzIG5vdCBzdXBwb3J0ZWQgYnkgc2VydmVyXG4iKTsKIAkJcmMgPSAt
RU9QTk9UU1VQUDsKKwl9CisKK291dDoKKwltbnRfY3R4LT54aWQgPSB4aWQ7CisJbW50X2N0eC0+
c2VydmVyID0gc2VydmVyOworCW1udF9jdHgtPnNlcyA9IHNlczsKKwltbnRfY3R4LT50Y29uID0g
TlVMTDsKKworCXJldHVybiByYzsKK30KKworaW50IGNpZnNfbW91bnRfZ2V0X3Rjb24oc3RydWN0
IGNpZnNfbW91bnRfY3R4ICptbnRfY3R4KQoreworCXN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNl
cnZlcjsKKwlzdHJ1Y3QgY2lmc19zYl9pbmZvICpjaWZzX3NiOworCXN0cnVjdCBzbWIzX2ZzX2Nv
bnRleHQgKmN0eDsKKwlzdHJ1Y3QgY2lmc190Y29uICp0Y29uID0gTlVMTDsKKwlpbnQgcmMgPSAw
OworCisJaWYgKFdBUk5fT05fT05DRSghbW50X2N0eCB8fCAhbW50X2N0eC0+c2VydmVyIHx8ICFt
bnRfY3R4LT5zZXMgfHwgIW1udF9jdHgtPmZzX2N0eCB8fAorCQkJICFtbnRfY3R4LT5jaWZzX3Ni
KSkgeworCQlyYyA9IC1FSU5WQUw7CiAJCWdvdG8gb3V0OwogCX0KKwlzZXJ2ZXIgPSBtbnRfY3R4
LT5zZXJ2ZXI7CisJY3R4ID0gbW50X2N0eC0+ZnNfY3R4OworCWNpZnNfc2IgPSBtbnRfY3R4LT5j
aWZzX3NiOwogCiAJLyogc2VhcmNoIGZvciBleGlzdGluZyB0Y29uIHRvIHRoaXMgc2VydmVyIHNo
YXJlICovCi0JdGNvbiA9IGNpZnNfZ2V0X3Rjb24oc2VzLCBjdHgpOworCXRjb24gPSBjaWZzX2dl
dF90Y29uKG1udF9jdHgtPnNlcywgY3R4KTsKIAlpZiAoSVNfRVJSKHRjb24pKSB7CiAJCXJjID0g
UFRSX0VSUih0Y29uKTsKIAkJdGNvbiA9IE5VTEw7CkBAIC0zMjYwLDcgKzMyNzQsNyBAQCBzdGF0
aWMgaW50IG1vdW50X2dldF9jb25ucyhzdHJ1Y3QgbW91bnRfY3R4ICptbnRfY3R4KQogCQkgKiBy
ZXNldCBvZiBjYXBzIGNoZWNrcyBtb3VudCB0byBzZWUgaWYgdW5peCBleHRlbnNpb25zIGRpc2Fi
bGVkCiAJCSAqIGZvciBqdXN0IHRoaXMgbW91bnQuCiAJCSAqLwotCQlyZXNldF9jaWZzX3VuaXhf
Y2Fwcyh4aWQsIHRjb24sIGNpZnNfc2IsIGN0eCk7CisJCXJlc2V0X2NpZnNfdW5peF9jYXBzKG1u
dF9jdHgtPnhpZCwgdGNvbiwgY2lmc19zYiwgY3R4KTsKIAkJc3Bpbl9sb2NrKCZ0Y29uLT5zZXMt
PnNlcnZlci0+c3J2X2xvY2spOwogCQlpZiAoKHRjb24tPnNlcy0+c2VydmVyLT50Y3BTdGF0dXMg
PT0gQ2lmc05lZWRSZWNvbm5lY3QpICYmCiAJCSAgICAobGU2NF90b19jcHUodGNvbi0+ZnNVbml4
SW5mby5DYXBhYmlsaXR5KSAmCkBAIC0zMjc2LDcgKzMyOTAsNyBAQCBzdGF0aWMgaW50IG1vdW50
X2dldF9jb25ucyhzdHJ1Y3QgbW91bnRfY3R4ICptbnRfY3R4KQogCiAJLyogZG8gbm90IGNhcmUg
aWYgYSBmb2xsb3dpbmcgY2FsbCBzdWNjZWVkIC0gaW5mb3JtYXRpb25hbCAqLwogCWlmICghdGNv
bi0+cGlwZSAmJiBzZXJ2ZXItPm9wcy0+cWZzX3Rjb24pIHsKLQkJc2VydmVyLT5vcHMtPnFmc190
Y29uKHhpZCwgdGNvbiwgY2lmc19zYik7CisJCXNlcnZlci0+b3BzLT5xZnNfdGNvbihtbnRfY3R4
LT54aWQsIHRjb24sIGNpZnNfc2IpOwogCQlpZiAoY2lmc19zYi0+bW50X2NpZnNfZmxhZ3MgJiBD
SUZTX01PVU5UX1JPX0NBQ0hFKSB7CiAJCQlpZiAodGNvbi0+ZnNEZXZJbmZvLkRldmljZUNoYXJh
Y3RlcmlzdGljcyAmCiAJCQkgICAgY3B1X3RvX2xlMzIoRklMRV9SRUFEX09OTFlfREVWSUNFKSkK
QEAgLTMzMDksMTQgKzMzMjMsMjIgQEAgc3RhdGljIGludCBtb3VudF9nZXRfY29ubnMoc3RydWN0
IG1vdW50X2N0eCAqbW50X2N0eCkKIAkJY2lmc19mc2NhY2hlX2dldF9zdXBlcl9jb29raWUodGNv
bik7CiAKIG91dDoKLQltbnRfY3R4LT5zZXJ2ZXIgPSBzZXJ2ZXI7Ci0JbW50X2N0eC0+c2VzID0g
c2VzOwogCW1udF9jdHgtPnRjb24gPSB0Y29uOwotCW1udF9jdHgtPnhpZCA9IHhpZDsKLQogCXJl
dHVybiByYzsKIH0KIAorLyogR2V0IGNvbm5lY3Rpb25zIGZvciB0Y3AsIHNlcyBhbmQgdGNvbiAq
Lworc3RhdGljIGludCBtb3VudF9nZXRfY29ubnMoc3RydWN0IGNpZnNfbW91bnRfY3R4ICptbnRf
Y3R4KQoreworCWludCByYzsKKworCXJjID0gY2lmc19tb3VudF9nZXRfc2Vzc2lvbihtbnRfY3R4
KTsKKwlpZiAocmMpCisJCXJldHVybiByYzsKKworCXJldHVybiBjaWZzX21vdW50X2dldF90Y29u
KG1udF9jdHgpOworfQorCiBzdGF0aWMgaW50IG1vdW50X3NldHVwX3RsaW5rKHN0cnVjdCBjaWZz
X3NiX2luZm8gKmNpZnNfc2IsIHN0cnVjdCBjaWZzX3NlcyAqc2VzLAogCQkJICAgICBzdHJ1Y3Qg
Y2lmc190Y29uICp0Y29uKQogewpAQCAtMzM0NSw3ICszMzY3LDcgQEAgc3RhdGljIGludCBtb3Vu
dF9zZXR1cF90bGluayhzdHJ1Y3QgY2lmc19zYl9pbmZvICpjaWZzX3NiLCBzdHJ1Y3QgY2lmc19z
ZXMgKnNlcywKIAogI2lmZGVmIENPTkZJR19DSUZTX0RGU19VUENBTEwKIC8qIEdldCB1bmlxdWUg
ZGZzIGNvbm5lY3Rpb25zICovCi1zdGF0aWMgaW50IG1vdW50X2dldF9kZnNfY29ubnMoc3RydWN0
IG1vdW50X2N0eCAqbW50X2N0eCkKK3N0YXRpYyBpbnQgbW91bnRfZ2V0X2Rmc19jb25ucyhzdHJ1
Y3QgY2lmc19tb3VudF9jdHggKm1udF9jdHgpCiB7CiAJaW50IHJjOwogCkBAIC0zNDQ4LDcgKzM0
NzAsNyBAQCBjaWZzX2FyZV9hbGxfcGF0aF9jb21wb25lbnRzX2FjY2Vzc2libGUoc3RydWN0IFRD
UF9TZXJ2ZXJfSW5mbyAqc2VydmVyLAogICoKICAqIFJldHVybiAtRVJFTU9URSBpZiBpdCBpcywg
b3RoZXJ3aXNlIDAgb3IgLWVycm5vLgogICovCi1zdGF0aWMgaW50IGlzX3BhdGhfcmVtb3RlKHN0
cnVjdCBtb3VudF9jdHggKm1udF9jdHgpCitzdGF0aWMgaW50IGlzX3BhdGhfcmVtb3RlKHN0cnVj
dCBjaWZzX21vdW50X2N0eCAqbW50X2N0eCkKIHsKIAlpbnQgcmM7CiAJc3RydWN0IGNpZnNfc2Jf
aW5mbyAqY2lmc19zYiA9IG1udF9jdHgtPmNpZnNfc2I7CkBAIC0zNDkyLDcgKzM1MTQsNyBAQCBz
dGF0aWMgaW50IGlzX3BhdGhfcmVtb3RlKHN0cnVjdCBtb3VudF9jdHggKm1udF9jdHgpCiB9CiAK
ICNpZmRlZiBDT05GSUdfQ0lGU19ERlNfVVBDQUxMCi1zdGF0aWMgdm9pZCBzZXRfcm9vdF9zZXMo
c3RydWN0IG1vdW50X2N0eCAqbW50X2N0eCkKK3N0YXRpYyB2b2lkIHNldF9yb290X3NlcyhzdHJ1
Y3QgY2lmc19tb3VudF9jdHggKm1udF9jdHgpCiB7CiAJaWYgKG1udF9jdHgtPnNlcykgewogCQlz
cGluX2xvY2soJmNpZnNfdGNwX3Nlc19sb2NrKTsKQEAgLTM1MDMsNyArMzUyNSw4IEBAIHN0YXRp
YyB2b2lkIHNldF9yb290X3NlcyhzdHJ1Y3QgbW91bnRfY3R4ICptbnRfY3R4KQogCW1udF9jdHgt
PnJvb3Rfc2VzID0gbW50X2N0eC0+c2VzOwogfQogCi1zdGF0aWMgaW50IGlzX2Rmc19tb3VudChz
dHJ1Y3QgbW91bnRfY3R4ICptbnRfY3R4LCBib29sICppc2Rmcywgc3RydWN0IGRmc19jYWNoZV90
Z3RfbGlzdCAqcm9vdF90bCkKK3N0YXRpYyBpbnQgaXNfZGZzX21vdW50KHN0cnVjdCBjaWZzX21v
dW50X2N0eCAqbW50X2N0eCwgYm9vbCAqaXNkZnMsCisJCQlzdHJ1Y3QgZGZzX2NhY2hlX3RndF9s
aXN0ICpyb290X3RsKQogewogCWludCByYzsKIAlzdHJ1Y3QgY2lmc19zYl9pbmZvICpjaWZzX3Ni
ID0gbW50X2N0eC0+Y2lmc19zYjsKQEAgLTM1MzQsNyArMzU1Nyw3IEBAIHN0YXRpYyBpbnQgaXNf
ZGZzX21vdW50KHN0cnVjdCBtb3VudF9jdHggKm1udF9jdHgsIGJvb2wgKmlzZGZzLCBzdHJ1Y3Qg
ZGZzX2NhY2hlCiAJcmV0dXJuIDA7CiB9CiAKLXN0YXRpYyBpbnQgY29ubmVjdF9kZnNfdGFyZ2V0
KHN0cnVjdCBtb3VudF9jdHggKm1udF9jdHgsIGNvbnN0IGNoYXIgKmZ1bGxfcGF0aCwKK3N0YXRp
YyBpbnQgY29ubmVjdF9kZnNfdGFyZ2V0KHN0cnVjdCBjaWZzX21vdW50X2N0eCAqbW50X2N0eCwg
Y29uc3QgY2hhciAqZnVsbF9wYXRoLAogCQkJICAgICAgY29uc3QgY2hhciAqcmVmX3BhdGgsIHN0
cnVjdCBkZnNfY2FjaGVfdGd0X2l0ZXJhdG9yICp0aXQpCiB7CiAJaW50IHJjOwpAQCAtMzU2OCw3
ICszNTkxLDcgQEAgc3RhdGljIGludCBjb25uZWN0X2Rmc190YXJnZXQoc3RydWN0IG1vdW50X2N0
eCAqbW50X2N0eCwgY29uc3QgY2hhciAqZnVsbF9wYXRoLAogCXJldHVybiByYzsKIH0KIAotc3Rh
dGljIGludCBjb25uZWN0X2Rmc19yb290KHN0cnVjdCBtb3VudF9jdHggKm1udF9jdHgsIHN0cnVj
dCBkZnNfY2FjaGVfdGd0X2xpc3QgKnJvb3RfdGwpCitzdGF0aWMgaW50IGNvbm5lY3RfZGZzX3Jv
b3Qoc3RydWN0IGNpZnNfbW91bnRfY3R4ICptbnRfY3R4LCBzdHJ1Y3QgZGZzX2NhY2hlX3RndF9s
aXN0ICpyb290X3RsKQogewogCWludCByYzsKIAljaGFyICpmdWxsX3BhdGg7CkBAIC0zNjEzLDcg
KzM2MzYsNyBAQCBzdGF0aWMgaW50IGNvbm5lY3RfZGZzX3Jvb3Qoc3RydWN0IG1vdW50X2N0eCAq
bW50X2N0eCwgc3RydWN0IGRmc19jYWNoZV90Z3RfbGlzdAogCXJldHVybiByYzsKIH0KIAotc3Rh
dGljIGludCBfX2ZvbGxvd19kZnNfbGluayhzdHJ1Y3QgbW91bnRfY3R4ICptbnRfY3R4KQorc3Rh
dGljIGludCBfX2ZvbGxvd19kZnNfbGluayhzdHJ1Y3QgY2lmc19tb3VudF9jdHggKm1udF9jdHgp
CiB7CiAJaW50IHJjOwogCXN0cnVjdCBjaWZzX3NiX2luZm8gKmNpZnNfc2IgPSBtbnRfY3R4LT5j
aWZzX3NiOwpAQCAtMzY2Miw3ICszNjg1LDcgQEAgc3RhdGljIGludCBfX2ZvbGxvd19kZnNfbGlu
ayhzdHJ1Y3QgbW91bnRfY3R4ICptbnRfY3R4KQogCXJldHVybiByYzsKIH0KIAotc3RhdGljIGlu
dCBmb2xsb3dfZGZzX2xpbmsoc3RydWN0IG1vdW50X2N0eCAqbW50X2N0eCkKK3N0YXRpYyBpbnQg
Zm9sbG93X2Rmc19saW5rKHN0cnVjdCBjaWZzX21vdW50X2N0eCAqbW50X2N0eCkKIHsKIAlpbnQg
cmM7CiAJc3RydWN0IGNpZnNfc2JfaW5mbyAqY2lmc19zYiA9IG1udF9jdHgtPmNpZnNfc2I7CkBA
IC0zNjk1LDcgKzM3MTgsNyBAQCBzdGF0aWMgaW50IGZvbGxvd19kZnNfbGluayhzdHJ1Y3QgbW91
bnRfY3R4ICptbnRfY3R4KQogfQogCiAvKiBTZXQgdXAgREZTIHJlZmVycmFsIHBhdGhzIGZvciBm
YWlsb3ZlciAqLwotc3RhdGljIHZvaWQgc2V0dXBfc2VydmVyX3JlZmVycmFsX3BhdGhzKHN0cnVj
dCBtb3VudF9jdHggKm1udF9jdHgpCitzdGF0aWMgdm9pZCBzZXR1cF9zZXJ2ZXJfcmVmZXJyYWxf
cGF0aHMoc3RydWN0IGNpZnNfbW91bnRfY3R4ICptbnRfY3R4KQogewogCXN0cnVjdCBUQ1BfU2Vy
dmVyX0luZm8gKnNlcnZlciA9IG1udF9jdHgtPnNlcnZlcjsKIApAQCAtMzcxMCw3ICszNzMzLDcg
QEAgc3RhdGljIHZvaWQgc2V0dXBfc2VydmVyX3JlZmVycmFsX3BhdGhzKHN0cnVjdCBtb3VudF9j
dHggKm1udF9jdHgpCiBpbnQgY2lmc19tb3VudChzdHJ1Y3QgY2lmc19zYl9pbmZvICpjaWZzX3Ni
LCBzdHJ1Y3Qgc21iM19mc19jb250ZXh0ICpjdHgpCiB7CiAJaW50IHJjOwotCXN0cnVjdCBtb3Vu
dF9jdHggbW50X2N0eCA9IHsgLmNpZnNfc2IgPSBjaWZzX3NiLCAuZnNfY3R4ID0gY3R4LCB9Owor
CXN0cnVjdCBjaWZzX21vdW50X2N0eCBtbnRfY3R4ID0geyAuY2lmc19zYiA9IGNpZnNfc2IsIC5m
c19jdHggPSBjdHgsIH07CiAJc3RydWN0IGRmc19jYWNoZV90Z3RfbGlzdCB0bCA9IERGU19DQUNI
RV9UR1RfTElTVF9JTklUKHRsKTsKIAlib29sIGlzZGZzOwogCkBAIC0zNzcwLDcgKzM3OTMsNyBA
QCBpbnQgY2lmc19tb3VudChzdHJ1Y3QgY2lmc19zYl9pbmZvICpjaWZzX3NiLCBzdHJ1Y3Qgc21i
M19mc19jb250ZXh0ICpjdHgpCiBpbnQgY2lmc19tb3VudChzdHJ1Y3QgY2lmc19zYl9pbmZvICpj
aWZzX3NiLCBzdHJ1Y3Qgc21iM19mc19jb250ZXh0ICpjdHgpCiB7CiAJaW50IHJjID0gMDsKLQlz
dHJ1Y3QgbW91bnRfY3R4IG1udF9jdHggPSB7IC5jaWZzX3NiID0gY2lmc19zYiwgLmZzX2N0eCA9
IGN0eCwgfTsKKwlzdHJ1Y3QgY2lmc19tb3VudF9jdHggbW50X2N0eCA9IHsgLmNpZnNfc2IgPSBj
aWZzX3NiLCAuZnNfY3R4ID0gY3R4LCB9OwogCiAJcmMgPSBtb3VudF9nZXRfY29ubnMoJm1udF9j
dHgpOwogCWlmIChyYykKLS0gCjIuMzQuMQoK
--000000000000c05acd05f008405d
Content-Type: text/x-patch; charset="US-ASCII"; 
	name="0006-cifs-share-dfs-connections-and-supers.patch"
Content-Disposition: attachment; 
	filename="0006-cifs-share-dfs-connections-and-supers.patch"
Content-Transfer-Encoding: base64
Content-ID: <f_lbs4ra0v2>
X-Attachment-Id: f_lbs4ra0v2

RnJvbSA0MGZmMWU0YTU0OWRmMzQ0MzBkMzBkYzY1MzA2NDEyZjE5MGQzMGYwIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBQYXVsbyBBbGNhbnRhcmEgPHBjQGNqci5uej4KRGF0ZTogVGh1
LCAxNyBOb3YgMjAyMiAxMzoyMzo0OSAtMDMwMApTdWJqZWN0OiBbUEFUQ0ggMDYvMTRdIGNpZnM6
IHNoYXJlIGRmcyBjb25uZWN0aW9ucyBhbmQgc3VwZXJzCgpXaGVuIG1hdGNoaW5nIERGUyBzdXBl
cmJsb2NrcyB3ZSBjYW4ndCByZWx5IG9uIGVpdGhlciB0aGUgc2VydmVyJ3MKYWRkcmVzcyBvciB0
Y29uJ3MgVU5DIG5hbWUgZnJvbSBtb3VudCgyKSBhcyB0aGUgZXhpc3Rpbmcgc2VydmVycyBhbmQK
dGNvbnMgbWlnaHQgYmUgY29ubmVjdGVkIHRvIHNvbWV3aGVyZSBlbHNlLiAgSW5zdGVhZCwgY2hl
Y2sgaWYKc3VwZXJibG9jayBpcyBkZnMsIGFuZCBpZiBzbywgbWF0Y2ggaXRzIG9yaWdpbmFsIHNv
dXJjZSBwYXRobmFtZSB3aXRoCnRoZSBuZXcgbW91bnQncyBzb3VyY2UgcGF0aG5hbWUuCgpGb3Ig
REZTIGNvbm5lY3Rpb25zLCBpbnN0ZWFkIG9mIGNoZWNraW5nIHNlcnZlcidzIGFkZHJlc3MsIG1h
dGNoIGl0cwpyZWZlcnJhbCBwYXRoIGFzIGl0IGNvdWxkIGJlIGNvbm5lY3RlZCB0byBkaWZmZXJl
bnQgdGFyZ2V0cy4KClNpZ25lZC1vZmYtYnk6IFBhdWxvIEFsY2FudGFyYSAoU1VTRSkgPHBjQGNq
ci5uej4KU2lnbmVkLW9mZi1ieTogU3RldmUgRnJlbmNoIDxzdGZyZW5jaEBtaWNyb3NvZnQuY29t
PgotLS0KIGZzL2NpZnMvY2lmc19kZWJ1Zy5jIHwgICA4ICsKIGZzL2NpZnMvY2lmc2dsb2IuaCAg
IHwgICA1IC0KIGZzL2NpZnMvY2lmc3Byb3RvLmggIHwgICAyICsKIGZzL2NpZnMvY29ubmVjdC5j
ICAgIHwgNDE3ICsrKysrKystLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KIGZz
L2NpZnMvZGZzLmMgICAgICAgIHwgMjI2ICsrKysrKysrKysrKysrKysrKysrKysrCiBmcy9jaWZz
L2Rmcy5oICAgICAgICB8ICAxNSArKwogZnMvY2lmcy9kZnNfY2FjaGUuYyAgfCAgMTQgKy0KIGZz
L2NpZnMvZnNfY29udGV4dC5jIHwgICA0ICsKIGZzL2NpZnMvZnNfY29udGV4dC5oIHwgICAxICsK
IDkgZmlsZXMgY2hhbmdlZCwgMzIzIGluc2VydGlvbnMoKyksIDM2OSBkZWxldGlvbnMoLSkKCmRp
ZmYgLS1naXQgYS9mcy9jaWZzL2NpZnNfZGVidWcuYyBiL2ZzL2NpZnMvY2lmc19kZWJ1Zy5jCmlu
ZGV4IDkwODUwZGEzOTBhZS4uNTZiMjNkZWY0Yzk1IDEwMDY0NAotLS0gYS9mcy9jaWZzL2NpZnNf
ZGVidWcuYworKysgYi9mcy9jaWZzL2NpZnNfZGVidWcuYwpAQCAtMzcyLDYgKzM3MiwxNCBAQCBz
dGF0aWMgaW50IGNpZnNfZGVidWdfZGF0YV9wcm9jX3Nob3coc3RydWN0IHNlcV9maWxlICptLCB2
b2lkICp2KQogCQlzZXFfcHJpbnRmKG0sICJcbkluIFNlbmQ6ICVkIEluIE1heFJlcSBXYWl0OiAl
ZCIsCiAJCQkJYXRvbWljX3JlYWQoJnNlcnZlci0+aW5fc2VuZCksCiAJCQkJYXRvbWljX3JlYWQo
JnNlcnZlci0+bnVtX3dhaXRlcnMpKTsKKwkJaWYgKElTX0VOQUJMRUQoQ09ORklHX0NJRlNfREZT
X1VQQ0FMTCkpIHsKKwkJCWlmIChzZXJ2ZXItPm9yaWdpbl9mdWxscGF0aCkKKwkJCQlzZXFfcHJp
bnRmKG0sICJcbkRGUyBvcmlnaW4gZnVsbCBwYXRoOiAlcyIsCisJCQkJCSAgIHNlcnZlci0+b3Jp
Z2luX2Z1bGxwYXRoKTsKKwkJCWlmIChzZXJ2ZXItPmxlYWZfZnVsbHBhdGgpCisJCQkJc2VxX3By
aW50ZihtLCAiXG5ERlMgbGVhZiBmdWxsIHBhdGg6ICAgJXMiLAorCQkJCQkgICBzZXJ2ZXItPmxl
YWZfZnVsbHBhdGgpOworCQl9CiAKIAkJc2VxX3ByaW50ZihtLCAiXG5cblx0U2Vzc2lvbnM6ICIp
OwogCQlpID0gMDsKZGlmZiAtLWdpdCBhL2ZzL2NpZnMvY2lmc2dsb2IuaCBiL2ZzL2NpZnMvY2lm
c2dsb2IuaAppbmRleCA3OTllNjQ0MjdmZGUuLjJlMjk3NmYxODc0ZiAxMDA2NDQKLS0tIGEvZnMv
Y2lmcy9jaWZzZ2xvYi5oCisrKyBiL2ZzL2NpZnMvY2lmc2dsb2IuaApAQCAtNzM4LDggKzczOCw2
IEBAIHN0cnVjdCBUQ1BfU2VydmVyX0luZm8gewogCWJvb2wgdXNlX3N3bl9kc3RhZGRyOwogCXN0
cnVjdCBzb2NrYWRkcl9zdG9yYWdlIHN3bl9kc3RhZGRyOwogI2VuZGlmCi0jaWZkZWYgQ09ORklH
X0NJRlNfREZTX1VQQ0FMTAotCWJvb2wgaXNfZGZzX2Nvbm47IC8qIGlmIGEgZGZzIGNvbm5lY3Rp
b24gKi8KIAlzdHJ1Y3QgbXV0ZXggcmVmcGF0aF9sb2NrOyAvKiBwcm90ZWN0cyBsZWFmX2Z1bGxw
YXRoICovCiAJLyoKIAkgKiBDYW5vbmljYWwgREZTIGZ1bGwgcGF0aHMgdGhhdCB3ZXJlIHVzZWQg
dG8gY2hhc2UgcmVmZXJyYWxzIGluIG1vdW50IGFuZCByZWNvbm5lY3QuCkBAIC03NTMsNyArNzUx
LDYgQEAgc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyB7CiAJICogZm9ybWF0OiBcXEhPU1RcU0hBUkVc
W09QVElPTkFMIFBBVEhdCiAJICovCiAJY2hhciAqb3JpZ2luX2Z1bGxwYXRoLCAqbGVhZl9mdWxs
cGF0aCwgKmN1cnJlbnRfZnVsbHBhdGg7Ci0jZW5kaWYKIH07CiAKIHN0YXRpYyBpbmxpbmUgYm9v
bCBpc19zbWIxKHN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlcikKQEAgLTE3NjcsMTEgKzE3
NjQsOSBAQCBzdHJ1Y3QgY2lmc19tb3VudF9jdHggewogCXN0cnVjdCBUQ1BfU2VydmVyX0luZm8g
KnNlcnZlcjsKIAlzdHJ1Y3QgY2lmc19zZXMgKnNlczsKIAlzdHJ1Y3QgY2lmc190Y29uICp0Y29u
OwotI2lmZGVmIENPTkZJR19DSUZTX0RGU19VUENBTEwKIAlzdHJ1Y3QgY2lmc19zZXMgKnJvb3Rf
c2VzOwogCXV1aWRfdCBtb3VudF9pZDsKIAljaGFyICpvcmlnaW5fZnVsbHBhdGgsICpsZWFmX2Z1
bGxwYXRoOwotI2VuZGlmCiB9OwogCiBzdGF0aWMgaW5saW5lIHZvaWQgZnJlZV9kZnNfaW5mb19w
YXJhbShzdHJ1Y3QgZGZzX2luZm8zX3BhcmFtICpwYXJhbSkKZGlmZiAtLWdpdCBhL2ZzL2NpZnMv
Y2lmc3Byb3RvLmggYi9mcy9jaWZzL2NpZnNwcm90by5oCmluZGV4IDRhZTNlODM3NTk0MS4uNGVm
ZTFiYzk3ODNlIDEwMDY0NAotLS0gYS9mcy9jaWZzL2NpZnNwcm90by5oCisrKyBiL2ZzL2NpZnMv
Y2lmc3Byb3RvLmgKQEAgLTI0Miw3ICsyNDIsOSBAQCBleHRlcm4gaW50IGNpZnNfcmVhZF9wYWdl
X2Zyb21fc29ja2V0KHN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlciwKIAkJCQkJdW5zaWdu
ZWQgaW50IHBhZ2Vfb2Zmc2V0LAogCQkJCQl1bnNpZ25lZCBpbnQgdG9fcmVhZCk7CiBleHRlcm4g
aW50IGNpZnNfc2V0dXBfY2lmc19zYihzdHJ1Y3QgY2lmc19zYl9pbmZvICpjaWZzX3NiKTsKK3Zv
aWQgY2lmc19tb3VudF9wdXRfY29ubnMoc3RydWN0IGNpZnNfbW91bnRfY3R4ICptbnRfY3R4KTsK
IGludCBjaWZzX21vdW50X2dldF9zZXNzaW9uKHN0cnVjdCBjaWZzX21vdW50X2N0eCAqbW50X2N0
eCk7CitpbnQgY2lmc19pc19wYXRoX3JlbW90ZShzdHJ1Y3QgY2lmc19tb3VudF9jdHggKm1udF9j
dHgpOwogaW50IGNpZnNfbW91bnRfZ2V0X3Rjb24oc3RydWN0IGNpZnNfbW91bnRfY3R4ICptbnRf
Y3R4KTsKIGV4dGVybiBpbnQgY2lmc19tYXRjaF9zdXBlcihzdHJ1Y3Qgc3VwZXJfYmxvY2sgKiwg
dm9pZCAqKTsKIGV4dGVybiBpbnQgY2lmc19tb3VudChzdHJ1Y3QgY2lmc19zYl9pbmZvICpjaWZz
X3NiLCBzdHJ1Y3Qgc21iM19mc19jb250ZXh0ICpjdHgpOwpkaWZmIC0tZ2l0IGEvZnMvY2lmcy9j
b25uZWN0LmMgYi9mcy9jaWZzL2Nvbm5lY3QuYwppbmRleCA1ZTQ2NTAyNTcwOGQuLmE2NmNiMjNh
OTU0ZSAxMDA2NDQKLS0tIGEvZnMvY2lmcy9jb25uZWN0LmMKKysrIGIvZnMvY2lmcy9jb25uZWN0
LmMKQEAgLTU0NiwxNiArNTQ2LDggQEAgc3RhdGljIGludCByZWNvbm5lY3RfZGZzX3NlcnZlcihz
dHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIpCiAKIGludCBjaWZzX3JlY29ubmVjdChzdHJ1
Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIsIGJvb2wgbWFya19zbWJfc2Vzc2lvbikKIHsKLQkv
KiBJZiB0Y3Agc2Vzc2lvbiBpcyBub3QgYW4gZGZzIGNvbm5lY3Rpb24sIHRoZW4gcmVjb25uZWN0
IHRvIGxhc3QgdGFyZ2V0IHNlcnZlciAqLwotCXNwaW5fbG9jaygmc2VydmVyLT5zcnZfbG9jayk7
Ci0JaWYgKCFzZXJ2ZXItPmlzX2Rmc19jb25uKSB7Ci0JCXNwaW5fdW5sb2NrKCZzZXJ2ZXItPnNy
dl9sb2NrKTsKLQkJcmV0dXJuIF9fY2lmc19yZWNvbm5lY3Qoc2VydmVyLCBtYXJrX3NtYl9zZXNz
aW9uKTsKLQl9Ci0Jc3Bpbl91bmxvY2soJnNlcnZlci0+c3J2X2xvY2spOwotCiAJbXV0ZXhfbG9j
aygmc2VydmVyLT5yZWZwYXRoX2xvY2spOwotCWlmICghc2VydmVyLT5vcmlnaW5fZnVsbHBhdGgg
fHwgIXNlcnZlci0+bGVhZl9mdWxscGF0aCkgeworCWlmICghc2VydmVyLT5sZWFmX2Z1bGxwYXRo
KSB7CiAJCW11dGV4X3VubG9jaygmc2VydmVyLT5yZWZwYXRoX2xvY2spOwogCQlyZXR1cm4gX19j
aWZzX3JlY29ubmVjdChzZXJ2ZXIsIG1hcmtfc21iX3Nlc3Npb24pOwogCX0KQEAgLTEzNjcsOSAr
MTM1OSw3IEBAIG1hdGNoX3BvcnQoc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyLCBzdHJ1
Y3Qgc29ja2FkZHIgKmFkZHIpCiAJcmV0dXJuIHBvcnQgPT0gKnNwb3J0OwogfQogCi1zdGF0aWMg
Ym9vbAotbWF0Y2hfYWRkcmVzcyhzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIsIHN0cnVj
dCBzb2NrYWRkciAqYWRkciwKLQkgICAgICBzdHJ1Y3Qgc29ja2FkZHIgKnNyY2FkZHIpCitzdGF0
aWMgYm9vbCBtYXRjaF9zZXJ2ZXJfYWRkcmVzcyhzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2
ZXIsIHN0cnVjdCBzb2NrYWRkciAqYWRkcikKIHsKIAlzd2l0Y2ggKGFkZHItPnNhX2ZhbWlseSkg
ewogCWNhc2UgQUZfSU5FVDogewpAQCAtMTM5OCw5ICsxMzg4LDYgQEAgbWF0Y2hfYWRkcmVzcyhz
dHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIsIHN0cnVjdCBzb2NrYWRkciAqYWRkciwKIAkJ
cmV0dXJuIGZhbHNlOyAvKiBkb24ndCBleHBlY3QgdG8gYmUgaGVyZSAqLwogCX0KIAotCWlmICgh
Y2lmc19tYXRjaF9pcGFkZHIoc3JjYWRkciwgKHN0cnVjdCBzb2NrYWRkciAqKSZzZXJ2ZXItPnNy
Y2FkZHIpKQotCQlyZXR1cm4gZmFsc2U7Ci0KIAlyZXR1cm4gdHJ1ZTsKIH0KIApAQCAtMTQyOCw3
ICsxNDE1LDggQEAgbWF0Y2hfc2VjdXJpdHkoc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVy
LCBzdHJ1Y3Qgc21iM19mc19jb250ZXh0ICpjdHgpCiB9CiAKIC8qIHRoaXMgZnVuY3Rpb24gbXVz
dCBiZSBjYWxsZWQgd2l0aCBzcnZfbG9jayBoZWxkICovCi1zdGF0aWMgaW50IG1hdGNoX3NlcnZl
cihzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIsIHN0cnVjdCBzbWIzX2ZzX2NvbnRleHQg
KmN0eCkKK3N0YXRpYyBpbnQgbWF0Y2hfc2VydmVyKHN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNl
cnZlciwgc3RydWN0IHNtYjNfZnNfY29udGV4dCAqY3R4LAorCQkJYm9vbCBkZnNfc3VwZXJfY21w
KQogewogCXN0cnVjdCBzb2NrYWRkciAqYWRkciA9IChzdHJ1Y3Qgc29ja2FkZHIgKikmY3R4LT5k
c3RhZGRyOwogCkBAIC0xNDUzLDE1ICsxNDQxLDMwIEBAIHN0YXRpYyBpbnQgbWF0Y2hfc2VydmVy
KHN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlciwgc3RydWN0IHNtYjNfZnNfY29udGV4dCAq
CiAJaWYgKCFuZXRfZXEoY2lmc19uZXRfbnMoc2VydmVyKSwgY3VycmVudC0+bnNwcm94eS0+bmV0
X25zKSkKIAkJcmV0dXJuIDA7CiAKLQlpZiAoc3RyY2FzZWNtcChzZXJ2ZXItPmhvc3RuYW1lLCBj
dHgtPnNlcnZlcl9ob3N0bmFtZSkpCi0JCXJldHVybiAwOwotCi0JaWYgKCFtYXRjaF9hZGRyZXNz
KHNlcnZlciwgYWRkciwKLQkJCSAgIChzdHJ1Y3Qgc29ja2FkZHIgKikmY3R4LT5zcmNhZGRyKSkK
LQkJcmV0dXJuIDA7Ci0KLQlpZiAoIW1hdGNoX3BvcnQoc2VydmVyLCBhZGRyKSkKKwlpZiAoIWNp
ZnNfbWF0Y2hfaXBhZGRyKChzdHJ1Y3Qgc29ja2FkZHIgKikmY3R4LT5zcmNhZGRyLAorCQkJICAg
ICAgIChzdHJ1Y3Qgc29ja2FkZHIgKikmc2VydmVyLT5zcmNhZGRyKSkKIAkJcmV0dXJuIDA7CisJ
LyoKKwkgKiBXaGVuIG1hdGNoaW5nIERGUyBzdXBlcmJsb2Nrcywgd2Ugb25seSBjaGVjayBmb3Ig
b3JpZ2luYWwgc291cmNlIHBhdGhuYW1lIGFzIHRoZQorCSAqIGN1cnJlbnRseSBjb25uZWN0ZWQg
dGFyZ2V0IG1pZ2h0IGJlIGRpZmZlcmVudCB0aGFuIHRoZSBvbmUgcGFyc2VkIGVhcmxpZXIgaW4g
aS5lLgorCSAqIG1vdW50LmNpZnMoOCkuCisJICovCisJaWYgKGRmc19zdXBlcl9jbXApIHsKKwkJ
aWYgKCFjdHgtPnNvdXJjZSB8fCAhc2VydmVyLT5vcmlnaW5fZnVsbHBhdGggfHwKKwkJICAgIHN0
cmNhc2VjbXAoc2VydmVyLT5vcmlnaW5fZnVsbHBhdGgsIGN0eC0+c291cmNlKSkKKwkJCXJldHVy
biAwOworCX0gZWxzZSB7CisJCS8qIFNraXAgYWRkciwgaG9zdG5hbWUgYW5kIHBvcnQgbWF0Y2hp
bmcgZm9yIERGUyBjb25uZWN0aW9ucyAqLworCQlpZiAoc2VydmVyLT5sZWFmX2Z1bGxwYXRoKSB7
CisJCQlpZiAoIWN0eC0+bGVhZl9mdWxscGF0aCB8fAorCQkJICAgIHN0cmNhc2VjbXAoc2VydmVy
LT5sZWFmX2Z1bGxwYXRoLCBjdHgtPmxlYWZfZnVsbHBhdGgpKQorCQkJCXJldHVybiAwOworCQl9
IGVsc2UgaWYgKHN0cmNhc2VjbXAoc2VydmVyLT5ob3N0bmFtZSwgY3R4LT5zZXJ2ZXJfaG9zdG5h
bWUpIHx8CisJCQkgICAhbWF0Y2hfc2VydmVyX2FkZHJlc3Moc2VydmVyLCBhZGRyKSB8fAorCQkJ
ICAgIW1hdGNoX3BvcnQoc2VydmVyLCBhZGRyKSkgeworCQkJcmV0dXJuIDA7CisJCX0KKwl9CiAK
IAlpZiAoIW1hdGNoX3NlY3VyaXR5KHNlcnZlciwgY3R4KSkKIAkJcmV0dXJuIDA7CkBAIC0xNDg5
LDIzICsxNDkyLDExIEBAIGNpZnNfZmluZF90Y3Bfc2Vzc2lvbihzdHJ1Y3Qgc21iM19mc19jb250
ZXh0ICpjdHgpCiAJc3Bpbl9sb2NrKCZjaWZzX3RjcF9zZXNfbG9jayk7CiAJbGlzdF9mb3JfZWFj
aF9lbnRyeShzZXJ2ZXIsICZjaWZzX3RjcF9zZXNfbGlzdCwgdGNwX3Nlc19saXN0KSB7CiAJCXNw
aW5fbG9jaygmc2VydmVyLT5zcnZfbG9jayk7Ci0jaWZkZWYgQ09ORklHX0NJRlNfREZTX1VQQ0FM
TAotCQkvKgotCQkgKiBERlMgZmFpbG92ZXIgaW1wbGVtZW50YXRpb24gaW4gY2lmc19yZWNvbm5l
Y3QoKSByZXF1aXJlcyB1bmlxdWUgdGNwIHNlc3Npb25zIGZvcgotCQkgKiBERlMgY29ubmVjdGlv
bnMgdG8gZG8gZmFpbG92ZXIgcHJvcGVybHksIHNvIGF2b2lkIHNoYXJpbmcgdGhlbSB3aXRoIHJl
Z3VsYXIKLQkJICogc2hhcmVzIG9yIGV2ZW4gbGlua3MgdGhhdCBtYXkgY29ubmVjdCB0byBzYW1l
IHNlcnZlciBidXQgaGF2aW5nIGNvbXBsZXRlbHkKLQkJICogZGlmZmVyZW50IGZhaWxvdmVyIHRh
cmdldHMuCi0JCSAqLwotCQlpZiAoc2VydmVyLT5pc19kZnNfY29ubikgewotCQkJc3Bpbl91bmxv
Y2soJnNlcnZlci0+c3J2X2xvY2spOwotCQkJY29udGludWU7Ci0JCX0KLSNlbmRpZgogCQkvKgog
CQkgKiBTa2lwIHNlcyBjaGFubmVscyBzaW5jZSB0aGV5J3JlIG9ubHkgaGFuZGxlZCBpbiBsb3dl
ciBsYXllcnMKIAkJICogKGUuZy4gY2lmc19zZW5kX3JlY3YpLgogCQkgKi8KLQkJaWYgKENJRlNf
U0VSVkVSX0lTX0NIQU4oc2VydmVyKSB8fCAhbWF0Y2hfc2VydmVyKHNlcnZlciwgY3R4KSkgewor
CQlpZiAoQ0lGU19TRVJWRVJfSVNfQ0hBTihzZXJ2ZXIpIHx8ICFtYXRjaF9zZXJ2ZXIoc2VydmVy
LCBjdHgsIGZhbHNlKSkgewogCQkJc3Bpbl91bmxvY2soJnNlcnZlci0+c3J2X2xvY2spOwogCQkJ
Y29udGludWU7CiAJCX0KQEAgLTE2MDAsNiArMTU5MSwxNSBAQCBjaWZzX2dldF90Y3Bfc2Vzc2lv
bihzdHJ1Y3Qgc21iM19mc19jb250ZXh0ICpjdHgsCiAJCWdvdG8gb3V0X2VycjsKIAl9CiAKKwlp
ZiAoY3R4LT5sZWFmX2Z1bGxwYXRoKSB7CisJCXRjcF9zZXMtPmxlYWZfZnVsbHBhdGggPSBrc3Ry
ZHVwKGN0eC0+bGVhZl9mdWxscGF0aCwgR0ZQX0tFUk5FTCk7CisJCWlmICghdGNwX3Nlcy0+bGVh
Zl9mdWxscGF0aCkgeworCQkJcmMgPSAtRU5PTUVNOworCQkJZ290byBvdXRfZXJyOworCQl9CisJ
CXRjcF9zZXMtPmN1cnJlbnRfZnVsbHBhdGggPSB0Y3Bfc2VzLT5sZWFmX2Z1bGxwYXRoOworCX0K
KwogCWlmIChjdHgtPm5vc2hhcmVzb2NrKQogCQl0Y3Bfc2VzLT5ub3NoYXJlc29jayA9IHRydWU7
CiAKQEAgLTE3NDgsNiArMTc0OCw3IEBAIGNpZnNfZ2V0X3RjcF9zZXNzaW9uKHN0cnVjdCBzbWIz
X2ZzX2NvbnRleHQgKmN0eCwKIAkJaWYgKENJRlNfU0VSVkVSX0lTX0NIQU4odGNwX3NlcykpCiAJ
CQljaWZzX3B1dF90Y3Bfc2Vzc2lvbih0Y3Bfc2VzLT5wcmltYXJ5X3NlcnZlciwgZmFsc2UpOwog
CQlrZnJlZSh0Y3Bfc2VzLT5ob3N0bmFtZSk7CisJCWtmcmVlKHRjcF9zZXMtPmxlYWZfZnVsbHBh
dGgpOwogCQlpZiAodGNwX3Nlcy0+c3NvY2tldCkKIAkJCXNvY2tfcmVsZWFzZSh0Y3Bfc2VzLT5z
c29ja2V0KTsKIAkJa2ZyZWUodGNwX3Nlcyk7CkBAIC0yMjc3LDExICsyMjc4LDEyIEBAIGNpZnNf
Z2V0X3NtYl9zZXMoc3RydWN0IFRDUF9TZXJ2ZXJfSW5mbyAqc2VydmVyLCBzdHJ1Y3Qgc21iM19m
c19jb250ZXh0ICpjdHgpCiB9CiAKIC8qIHRoaXMgZnVuY3Rpb24gbXVzdCBiZSBjYWxsZWQgd2l0
aCB0Y19sb2NrIGhlbGQgKi8KLXN0YXRpYyBpbnQgbWF0Y2hfdGNvbihzdHJ1Y3QgY2lmc190Y29u
ICp0Y29uLCBzdHJ1Y3Qgc21iM19mc19jb250ZXh0ICpjdHgpCitzdGF0aWMgaW50IG1hdGNoX3Rj
b24oc3RydWN0IGNpZnNfdGNvbiAqdGNvbiwgc3RydWN0IHNtYjNfZnNfY29udGV4dCAqY3R4LCBi
b29sIGRmc19zdXBlcl9jbXApCiB7CiAJaWYgKHRjb24tPnN0YXR1cyA9PSBUSURfRVhJVElORykK
IAkJcmV0dXJuIDA7Ci0JaWYgKHN0cm5jbXAodGNvbi0+dHJlZV9uYW1lLCBjdHgtPlVOQywgTUFY
X1RSRUVfU0laRSkpCisJLyogU2tpcCBVTkMgdmFsaWRhdGlvbiB3aGVuIG1hdGNoaW5nIERGUyBz
dXBlcmJsb2NrcyAqLworCWlmICghZGZzX3N1cGVyX2NtcCAmJiBzdHJuY21wKHRjb24tPnRyZWVf
bmFtZSwgY3R4LT5VTkMsIE1BWF9UUkVFX1NJWkUpKQogCQlyZXR1cm4gMDsKIAlpZiAodGNvbi0+
c2VhbCAhPSBjdHgtPnNlYWwpCiAJCXJldHVybiAwOwpAQCAtMjMwNCw3ICsyMzA2LDcgQEAgY2lm
c19maW5kX3Rjb24oc3RydWN0IGNpZnNfc2VzICpzZXMsIHN0cnVjdCBzbWIzX2ZzX2NvbnRleHQg
KmN0eCkKIAlzcGluX2xvY2soJmNpZnNfdGNwX3Nlc19sb2NrKTsKIAlsaXN0X2Zvcl9lYWNoX2Vu
dHJ5KHRjb24sICZzZXMtPnRjb25fbGlzdCwgdGNvbl9saXN0KSB7CiAJCXNwaW5fbG9jaygmdGNv
bi0+dGNfbG9jayk7Ci0JCWlmICghbWF0Y2hfdGNvbih0Y29uLCBjdHgpKSB7CisJCWlmICghbWF0
Y2hfdGNvbih0Y29uLCBjdHgsIGZhbHNlKSkgewogCQkJc3Bpbl91bmxvY2soJnRjb24tPnRjX2xv
Y2spOwogCQkJY29udGludWU7CiAJCX0KQEAgLTI2OTksNiArMjcwMSw3IEBAIGNpZnNfbWF0Y2hf
c3VwZXIoc3RydWN0IHN1cGVyX2Jsb2NrICpzYiwgdm9pZCAqZGF0YSkKIAlzdHJ1Y3QgY2lmc19z
ZXMgKnNlczsKIAlzdHJ1Y3QgY2lmc190Y29uICp0Y29uOwogCXN0cnVjdCB0Y29uX2xpbmsgKnRs
aW5rOworCWJvb2wgZGZzX3N1cGVyX2NtcDsKIAlpbnQgcmMgPSAwOwogCiAJc3Bpbl9sb2NrKCZj
aWZzX3RjcF9zZXNfbG9jayk7CkBAIC0yNzEzLDE0ICsyNzE2LDE2IEBAIGNpZnNfbWF0Y2hfc3Vw
ZXIoc3RydWN0IHN1cGVyX2Jsb2NrICpzYiwgdm9pZCAqZGF0YSkKIAlzZXMgPSB0Y29uLT5zZXM7
CiAJdGNwX3NydiA9IHNlcy0+c2VydmVyOwogCisJZGZzX3N1cGVyX2NtcCA9IElTX0VOQUJMRUQo
Q09ORklHX0NJRlNfREZTX1VQQ0FMTCkgJiYgdGNwX3Nydi0+b3JpZ2luX2Z1bGxwYXRoOworCiAJ
Y3R4ID0gbW50X2RhdGEtPmN0eDsKIAogCXNwaW5fbG9jaygmdGNwX3Nydi0+c3J2X2xvY2spOwog
CXNwaW5fbG9jaygmc2VzLT5zZXNfbG9jayk7CiAJc3Bpbl9sb2NrKCZ0Y29uLT50Y19sb2NrKTsK
LQlpZiAoIW1hdGNoX3NlcnZlcih0Y3Bfc3J2LCBjdHgpIHx8CisJaWYgKCFtYXRjaF9zZXJ2ZXIo
dGNwX3NydiwgY3R4LCBkZnNfc3VwZXJfY21wKSB8fAogCSAgICAhbWF0Y2hfc2Vzc2lvbihzZXMs
IGN0eCkgfHwKLQkgICAgIW1hdGNoX3Rjb24odGNvbiwgY3R4KSB8fAorCSAgICAhbWF0Y2hfdGNv
bih0Y29uLCBjdHgsIGRmc19zdXBlcl9jbXApIHx8CiAJICAgICFtYXRjaF9wcmVwYXRoKHNiLCBt
bnRfZGF0YSkpIHsKIAkJcmMgPSAwOwogCQlnb3RvIG91dDsKQEAgLTMxNzcsNyArMzE4Miw3IEBA
IGludCBjaWZzX3NldHVwX2NpZnNfc2Ioc3RydWN0IGNpZnNfc2JfaW5mbyAqY2lmc19zYikKIH0K
IAogLyogUmVsZWFzZSBhbGwgc3VjY2VlZCBjb25uZWN0aW9ucyAqLwotc3RhdGljIGlubGluZSB2
b2lkIG1vdW50X3B1dF9jb25ucyhzdHJ1Y3QgY2lmc19tb3VudF9jdHggKm1udF9jdHgpCit2b2lk
IGNpZnNfbW91bnRfcHV0X2Nvbm5zKHN0cnVjdCBjaWZzX21vdW50X2N0eCAqbW50X2N0eCkKIHsK
IAlpbnQgcmMgPSAwOwogCkBAIC0zMzI3LDE4ICszMzMyLDYgQEAgaW50IGNpZnNfbW91bnRfZ2V0
X3Rjb24oc3RydWN0IGNpZnNfbW91bnRfY3R4ICptbnRfY3R4KQogCXJldHVybiByYzsKIH0KIAot
LyogR2V0IGNvbm5lY3Rpb25zIGZvciB0Y3AsIHNlcyBhbmQgdGNvbiAqLwotc3RhdGljIGludCBt
b3VudF9nZXRfY29ubnMoc3RydWN0IGNpZnNfbW91bnRfY3R4ICptbnRfY3R4KQotewotCWludCBy
YzsKLQotCXJjID0gY2lmc19tb3VudF9nZXRfc2Vzc2lvbihtbnRfY3R4KTsKLQlpZiAocmMpCi0J
CXJldHVybiByYzsKLQotCXJldHVybiBjaWZzX21vdW50X2dldF90Y29uKG1udF9jdHgpOwotfQot
CiBzdGF0aWMgaW50IG1vdW50X3NldHVwX3RsaW5rKHN0cnVjdCBjaWZzX3NiX2luZm8gKmNpZnNf
c2IsIHN0cnVjdCBjaWZzX3NlcyAqc2VzLAogCQkJICAgICBzdHJ1Y3QgY2lmc190Y29uICp0Y29u
KQogewpAQCAtMzM2NSw1OSArMzM1OCw2IEBAIHN0YXRpYyBpbnQgbW91bnRfc2V0dXBfdGxpbmso
c3RydWN0IGNpZnNfc2JfaW5mbyAqY2lmc19zYiwgc3RydWN0IGNpZnNfc2VzICpzZXMsCiAJcmV0
dXJuIDA7CiB9CiAKLSNpZmRlZiBDT05GSUdfQ0lGU19ERlNfVVBDQUxMCi0vKiBHZXQgdW5pcXVl
IGRmcyBjb25uZWN0aW9ucyAqLwotc3RhdGljIGludCBtb3VudF9nZXRfZGZzX2Nvbm5zKHN0cnVj
dCBjaWZzX21vdW50X2N0eCAqbW50X2N0eCkKLXsKLQlpbnQgcmM7Ci0KLQltbnRfY3R4LT5mc19j
dHgtPm5vc2hhcmVzb2NrID0gdHJ1ZTsKLQlyYyA9IG1vdW50X2dldF9jb25ucyhtbnRfY3R4KTsK
LQlpZiAobW50X2N0eC0+c2VydmVyKSB7Ci0JCWNpZnNfZGJnKEZZSSwgIiVzOiBtYXJraW5nIHRj
cCBzZXNzaW9uIGFzIGEgZGZzIGNvbm5lY3Rpb25cbiIsIF9fZnVuY19fKTsKLQkJc3Bpbl9sb2Nr
KCZtbnRfY3R4LT5zZXJ2ZXItPnNydl9sb2NrKTsKLQkJbW50X2N0eC0+c2VydmVyLT5pc19kZnNf
Y29ubiA9IHRydWU7Ci0JCXNwaW5fdW5sb2NrKCZtbnRfY3R4LT5zZXJ2ZXItPnNydl9sb2NrKTsK
LQl9Ci0JcmV0dXJuIHJjOwotfQotCi0vKgotICogY2lmc19idWlsZF9wYXRoX3RvX3Jvb3QgcmV0
dXJucyBmdWxsIHBhdGggdG8gcm9vdCB3aGVuIHdlIGRvIG5vdCBoYXZlIGFuCi0gKiBleGlzdGlu
ZyBjb25uZWN0aW9uICh0Y29uKQotICovCi1zdGF0aWMgY2hhciAqCi1idWlsZF91bmNfcGF0aF90
b19yb290KGNvbnN0IHN0cnVjdCBzbWIzX2ZzX2NvbnRleHQgKmN0eCwKLQkJICAgICAgIGNvbnN0
IHN0cnVjdCBjaWZzX3NiX2luZm8gKmNpZnNfc2IsIGJvb2wgdXNlcHBhdGgpCi17Ci0JY2hhciAq
ZnVsbF9wYXRoLCAqcG9zOwotCXVuc2lnbmVkIGludCBwcGxlbiA9IHVzZXBwYXRoICYmIGN0eC0+
cHJlcGF0aCA/Ci0JCXN0cmxlbihjdHgtPnByZXBhdGgpICsgMSA6IDA7Ci0JdW5zaWduZWQgaW50
IHVuY19sZW4gPSBzdHJubGVuKGN0eC0+VU5DLCBNQVhfVFJFRV9TSVpFICsgMSk7Ci0KLQlpZiAo
dW5jX2xlbiA+IE1BWF9UUkVFX1NJWkUpCi0JCXJldHVybiBFUlJfUFRSKC1FSU5WQUwpOwotCi0J
ZnVsbF9wYXRoID0ga21hbGxvYyh1bmNfbGVuICsgcHBsZW4gKyAxLCBHRlBfS0VSTkVMKTsKLQlp
ZiAoZnVsbF9wYXRoID09IE5VTEwpCi0JCXJldHVybiBFUlJfUFRSKC1FTk9NRU0pOwotCi0JbWVt
Y3B5KGZ1bGxfcGF0aCwgY3R4LT5VTkMsIHVuY19sZW4pOwotCXBvcyA9IGZ1bGxfcGF0aCArIHVu
Y19sZW47Ci0KLQlpZiAocHBsZW4pIHsKLQkJKnBvcyA9IENJRlNfRElSX1NFUChjaWZzX3NiKTsK
LQkJbWVtY3B5KHBvcyArIDEsIGN0eC0+cHJlcGF0aCwgcHBsZW4pOwotCQlwb3MgKz0gcHBsZW47
Ci0JfQotCi0JKnBvcyA9ICdcMCc7IC8qIGFkZCB0cmFpbGluZyBudWxsICovCi0JY29udmVydF9k
ZWxpbWl0ZXIoZnVsbF9wYXRoLCBDSUZTX0RJUl9TRVAoY2lmc19zYikpOwotCWNpZnNfZGJnKEZZ
SSwgIiVzOiBmdWxsX3BhdGg9JXNcbiIsIF9fZnVuY19fLCBmdWxsX3BhdGgpOwotCXJldHVybiBm
dWxsX3BhdGg7Ci19Ci0jZW5kaWYKLQogc3RhdGljIGludAogY2lmc19hcmVfYWxsX3BhdGhfY29t
cG9uZW50c19hY2Nlc3NpYmxlKHN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlciwKIAkJCQkJ
dW5zaWduZWQgaW50IHhpZCwKQEAgLTM0NzAsNyArMzQxMCw3IEBAIGNpZnNfYXJlX2FsbF9wYXRo
X2NvbXBvbmVudHNfYWNjZXNzaWJsZShzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIsCiAg
KgogICogUmV0dXJuIC1FUkVNT1RFIGlmIGl0IGlzLCBvdGhlcndpc2UgMCBvciAtZXJybm8uCiAg
Ki8KLXN0YXRpYyBpbnQgaXNfcGF0aF9yZW1vdGUoc3RydWN0IGNpZnNfbW91bnRfY3R4ICptbnRf
Y3R4KQoraW50IGNpZnNfaXNfcGF0aF9yZW1vdGUoc3RydWN0IGNpZnNfbW91bnRfY3R4ICptbnRf
Y3R4KQogewogCWludCByYzsKIAlzdHJ1Y3QgY2lmc19zYl9pbmZvICpjaWZzX3NiID0gbW50X2N0
eC0+Y2lmc19zYjsKQEAgLTM1MTQsMjUwICszNDU0LDE5IEBAIHN0YXRpYyBpbnQgaXNfcGF0aF9y
ZW1vdGUoc3RydWN0IGNpZnNfbW91bnRfY3R4ICptbnRfY3R4KQogfQogCiAjaWZkZWYgQ09ORklH
X0NJRlNfREZTX1VQQ0FMTAotc3RhdGljIHZvaWQgc2V0X3Jvb3Rfc2VzKHN0cnVjdCBjaWZzX21v
dW50X2N0eCAqbW50X2N0eCkKLXsKLQlpZiAobW50X2N0eC0+c2VzKSB7Ci0JCXNwaW5fbG9jaygm
Y2lmc190Y3Bfc2VzX2xvY2spOwotCQltbnRfY3R4LT5zZXMtPnNlc19jb3VudCsrOwotCQlzcGlu
X3VubG9jaygmY2lmc190Y3Bfc2VzX2xvY2spOwotCQlkZnNfY2FjaGVfYWRkX3JlZnNydl9zZXNz
aW9uKCZtbnRfY3R4LT5tb3VudF9pZCwgbW50X2N0eC0+c2VzKTsKLQl9Ci0JbW50X2N0eC0+cm9v
dF9zZXMgPSBtbnRfY3R4LT5zZXM7Ci19Ci0KLXN0YXRpYyBpbnQgaXNfZGZzX21vdW50KHN0cnVj
dCBjaWZzX21vdW50X2N0eCAqbW50X2N0eCwgYm9vbCAqaXNkZnMsCi0JCQlzdHJ1Y3QgZGZzX2Nh
Y2hlX3RndF9saXN0ICpyb290X3RsKQotewotCWludCByYzsKLQlzdHJ1Y3QgY2lmc19zYl9pbmZv
ICpjaWZzX3NiID0gbW50X2N0eC0+Y2lmc19zYjsKLQlzdHJ1Y3Qgc21iM19mc19jb250ZXh0ICpj
dHggPSBtbnRfY3R4LT5mc19jdHg7Ci0KLQkqaXNkZnMgPSB0cnVlOwotCi0JcmMgPSBtb3VudF9n
ZXRfY29ubnMobW50X2N0eCk7Ci0JLyoKLQkgKiBJZiBjYWxsZWQgd2l0aCAnbm9kZnMnIG1vdW50
IG9wdGlvbiwgdGhlbiBza2lwIERGUyByZXNvbHZpbmcuICBPdGhlcndpc2UgdW5jb25kaXRpb25h
bGx5Ci0JICogdHJ5IHRvIGdldCBhbiBERlMgcmVmZXJyYWwgKGV2ZW4gY2FjaGVkKSB0byBkZXRl
cm1pbmUgd2hldGhlciBpdCBpcyBhbiBERlMgbW91bnQuCi0JICoKLQkgKiBTa2lwIHByZWZpeCBw
YXRoIHRvIHByb3ZpZGUgc3VwcG9ydCBmb3IgREZTIHJlZmVycmFscyBmcm9tIHcyazggc2VydmVy
cyB3aGljaCBkb24ndCBzZWVtCi0JICogdG8gcmVzcG9uZCB3aXRoIFBBVEhfTk9UX0NPVkVSRUQg
dG8gcmVxdWVzdHMgdGhhdCBpbmNsdWRlIHRoZSBwcmVmaXguCi0JICovCi0JaWYgKChjaWZzX3Ni
LT5tbnRfY2lmc19mbGFncyAmIENJRlNfTU9VTlRfTk9fREZTKSB8fAotCSAgICBkZnNfY2FjaGVf
ZmluZChtbnRfY3R4LT54aWQsIG1udF9jdHgtPnNlcywgY2lmc19zYi0+bG9jYWxfbmxzLCBjaWZz
X3JlbWFwKGNpZnNfc2IpLAotCQkJICAgY3R4LT5VTkMgKyAxLCBOVUxMLCByb290X3RsKSkgewot
CQlpZiAocmMpCi0JCQlyZXR1cm4gcmM7Ci0JCS8qIENoZWNrIGlmIGl0IGlzIGZ1bGx5IGFjY2Vz
c2libGUgYW5kIHRoZW4gbW91bnQgaXQgKi8KLQkJcmMgPSBpc19wYXRoX3JlbW90ZShtbnRfY3R4
KTsKLQkJaWYgKCFyYykKLQkJCSppc2RmcyA9IGZhbHNlOwotCQllbHNlIGlmIChyYyAhPSAtRVJF
TU9URSkKLQkJCXJldHVybiByYzsKLQl9Ci0JcmV0dXJuIDA7Ci19Ci0KLXN0YXRpYyBpbnQgY29u
bmVjdF9kZnNfdGFyZ2V0KHN0cnVjdCBjaWZzX21vdW50X2N0eCAqbW50X2N0eCwgY29uc3QgY2hh
ciAqZnVsbF9wYXRoLAotCQkJICAgICAgY29uc3QgY2hhciAqcmVmX3BhdGgsIHN0cnVjdCBkZnNf
Y2FjaGVfdGd0X2l0ZXJhdG9yICp0aXQpCi17Ci0JaW50IHJjOwotCXN0cnVjdCBkZnNfaW5mbzNf
cGFyYW0gcmVmID0ge307Ci0Jc3RydWN0IGNpZnNfc2JfaW5mbyAqY2lmc19zYiA9IG1udF9jdHgt
PmNpZnNfc2I7Ci0KLQljaWZzX2RiZyhGWUksICIlczogZnVsbF9wYXRoPSVzIHJlZl9wYXRoPSVz
IHRhcmdldD0lc1xuIiwgX19mdW5jX18sIGZ1bGxfcGF0aCwgcmVmX3BhdGgsCi0JCSBkZnNfY2Fj
aGVfZ2V0X3RndF9uYW1lKHRpdCkpOwotCi0JcmMgPSBkZnNfY2FjaGVfZ2V0X3RndF9yZWZlcnJh
bChyZWZfcGF0aCwgdGl0LCAmcmVmKTsKLQlpZiAocmMpCi0JCWdvdG8gb3V0OwotCi0JcmMgPSBk
ZnNfcGFyc2VfdGFyZ2V0X3JlZmVycmFsKGZ1bGxfcGF0aCArIDEsICZyZWYsIG1udF9jdHgtPmZz
X2N0eCk7Ci0JaWYgKHJjKQotCQlnb3RvIG91dDsKLQotCS8qIFhYWDogbWF5YmUgY2hlY2sgaWYg
d2Ugd2VyZSBhY3R1YWxseSByZWRpcmVjdGVkIGFuZCBhdm9pZCByZWNvbm5lY3Rpbmc/ICovCi0J
bW91bnRfcHV0X2Nvbm5zKG1udF9jdHgpOwotCXJjID0gbW91bnRfZ2V0X2Rmc19jb25ucyhtbnRf
Y3R4KTsKLQotCWlmICghcmMpIHsKLQkJaWYgKGNpZnNfaXNfcmVmZXJyYWxfc2VydmVyKG1udF9j
dHgtPnRjb24sICZyZWYpKQotCQkJc2V0X3Jvb3Rfc2VzKG1udF9jdHgpOwotCQlyYyA9IGRmc19j
YWNoZV91cGRhdGVfdGd0aGludChtbnRfY3R4LT54aWQsIG1udF9jdHgtPnJvb3Rfc2VzLCBjaWZz
X3NiLT5sb2NhbF9ubHMsCi0JCQkJCSAgICAgIGNpZnNfcmVtYXAoY2lmc19zYiksIHJlZl9wYXRo
LCB0aXQpOwotCX0KLQotb3V0OgotCWZyZWVfZGZzX2luZm9fcGFyYW0oJnJlZik7Ci0JcmV0dXJu
IHJjOwotfQotCi1zdGF0aWMgaW50IGNvbm5lY3RfZGZzX3Jvb3Qoc3RydWN0IGNpZnNfbW91bnRf
Y3R4ICptbnRfY3R4LCBzdHJ1Y3QgZGZzX2NhY2hlX3RndF9saXN0ICpyb290X3RsKQotewotCWlu
dCByYzsKLQljaGFyICpmdWxsX3BhdGg7Ci0Jc3RydWN0IGNpZnNfc2JfaW5mbyAqY2lmc19zYiA9
IG1udF9jdHgtPmNpZnNfc2I7Ci0Jc3RydWN0IHNtYjNfZnNfY29udGV4dCAqY3R4ID0gbW50X2N0
eC0+ZnNfY3R4OwotCXN0cnVjdCBkZnNfY2FjaGVfdGd0X2l0ZXJhdG9yICp0aXQ7Ci0KLQkvKiBQ
dXQgaW5pdGlhbCBjb25uZWN0aW9ucyBhcyB0aGV5IG1pZ2h0IGJlIHNoYXJlZCB3aXRoIG90aGVy
IG1vdW50cy4gIFdlIG5lZWQgdW5pcXVlIGRmcwotCSAqIGNvbm5lY3Rpb25zIHBlciBtb3VudCB0
byBwcm9wZXJseSBmYWlsb3Zlciwgc28gbW91bnRfZ2V0X2Rmc19jb25ucygpIG11c3QgYmUgdXNl
ZCBmcm9tCi0JICogbm93IG9uLgotCSAqLwotCW1vdW50X3B1dF9jb25ucyhtbnRfY3R4KTsKLQlt
b3VudF9nZXRfZGZzX2Nvbm5zKG1udF9jdHgpOwotCXNldF9yb290X3NlcyhtbnRfY3R4KTsKLQot
CWZ1bGxfcGF0aCA9IGJ1aWxkX3VuY19wYXRoX3RvX3Jvb3QoY3R4LCBjaWZzX3NiLCB0cnVlKTsK
LQlpZiAoSVNfRVJSKGZ1bGxfcGF0aCkpCi0JCXJldHVybiBQVFJfRVJSKGZ1bGxfcGF0aCk7Ci0K
LQltbnRfY3R4LT5vcmlnaW5fZnVsbHBhdGggPSBkZnNfY2FjaGVfY2Fub25pY2FsX3BhdGgoY3R4
LT5VTkMsIGNpZnNfc2ItPmxvY2FsX25scywKLQkJCQkJCQkgICAgY2lmc19yZW1hcChjaWZzX3Ni
KSk7Ci0JaWYgKElTX0VSUihtbnRfY3R4LT5vcmlnaW5fZnVsbHBhdGgpKSB7Ci0JCXJjID0gUFRS
X0VSUihtbnRfY3R4LT5vcmlnaW5fZnVsbHBhdGgpOwotCQltbnRfY3R4LT5vcmlnaW5fZnVsbHBh
dGggPSBOVUxMOwotCQlnb3RvIG91dDsKLQl9Ci0KLQkvKiBUcnkgYWxsIGRmcyByb290IHRhcmdl
dHMgKi8KLQlmb3IgKHJjID0gLUVOT0VOVCwgdGl0ID0gZGZzX2NhY2hlX2dldF90Z3RfaXRlcmF0
b3Iocm9vdF90bCk7Ci0JICAgICB0aXQ7IHRpdCA9IGRmc19jYWNoZV9nZXRfbmV4dF90Z3Qocm9v
dF90bCwgdGl0KSkgewotCQlyYyA9IGNvbm5lY3RfZGZzX3RhcmdldChtbnRfY3R4LCBmdWxsX3Bh
dGgsIG1udF9jdHgtPm9yaWdpbl9mdWxscGF0aCArIDEsIHRpdCk7Ci0JCWlmICghcmMpIHsKLQkJ
CW1udF9jdHgtPmxlYWZfZnVsbHBhdGggPSBrc3RyZHVwKG1udF9jdHgtPm9yaWdpbl9mdWxscGF0
aCwgR0ZQX0tFUk5FTCk7Ci0JCQlpZiAoIW1udF9jdHgtPmxlYWZfZnVsbHBhdGgpCi0JCQkJcmMg
PSAtRU5PTUVNOwotCQkJYnJlYWs7Ci0JCX0KLQl9Ci0KLW91dDoKLQlrZnJlZShmdWxsX3BhdGgp
OwotCXJldHVybiByYzsKLX0KLQotc3RhdGljIGludCBfX2ZvbGxvd19kZnNfbGluayhzdHJ1Y3Qg
Y2lmc19tb3VudF9jdHggKm1udF9jdHgpCi17Ci0JaW50IHJjOwotCXN0cnVjdCBjaWZzX3NiX2lu
Zm8gKmNpZnNfc2IgPSBtbnRfY3R4LT5jaWZzX3NiOwotCXN0cnVjdCBzbWIzX2ZzX2NvbnRleHQg
KmN0eCA9IG1udF9jdHgtPmZzX2N0eDsKLQljaGFyICpmdWxsX3BhdGg7Ci0Jc3RydWN0IGRmc19j
YWNoZV90Z3RfbGlzdCB0bCA9IERGU19DQUNIRV9UR1RfTElTVF9JTklUKHRsKTsKLQlzdHJ1Y3Qg
ZGZzX2NhY2hlX3RndF9pdGVyYXRvciAqdGl0OwotCi0JZnVsbF9wYXRoID0gYnVpbGRfdW5jX3Bh
dGhfdG9fcm9vdChjdHgsIGNpZnNfc2IsIHRydWUpOwotCWlmIChJU19FUlIoZnVsbF9wYXRoKSkK
LQkJcmV0dXJuIFBUUl9FUlIoZnVsbF9wYXRoKTsKLQotCWtmcmVlKG1udF9jdHgtPmxlYWZfZnVs
bHBhdGgpOwotCW1udF9jdHgtPmxlYWZfZnVsbHBhdGggPSBkZnNfY2FjaGVfY2Fub25pY2FsX3Bh
dGgoZnVsbF9wYXRoLCBjaWZzX3NiLT5sb2NhbF9ubHMsCi0JCQkJCQkJICBjaWZzX3JlbWFwKGNp
ZnNfc2IpKTsKLQlpZiAoSVNfRVJSKG1udF9jdHgtPmxlYWZfZnVsbHBhdGgpKSB7Ci0JCXJjID0g
UFRSX0VSUihtbnRfY3R4LT5sZWFmX2Z1bGxwYXRoKTsKLQkJbW50X2N0eC0+bGVhZl9mdWxscGF0
aCA9IE5VTEw7Ci0JCWdvdG8gb3V0OwotCX0KLQotCS8qIEdldCByZWZlcnJhbCBmcm9tIGRmcyBs
aW5rICovCi0JcmMgPSBkZnNfY2FjaGVfZmluZChtbnRfY3R4LT54aWQsIG1udF9jdHgtPnJvb3Rf
c2VzLCBjaWZzX3NiLT5sb2NhbF9ubHMsCi0JCQkgICAgY2lmc19yZW1hcChjaWZzX3NiKSwgbW50
X2N0eC0+bGVhZl9mdWxscGF0aCArIDEsIE5VTEwsICZ0bCk7Ci0JaWYgKHJjKQotCQlnb3RvIG91
dDsKLQotCS8qIFRyeSBhbGwgZGZzIGxpbmsgdGFyZ2V0cy4gIElmIGFuIEkvTyBmYWlscyBmcm9t
IGN1cnJlbnRseSBjb25uZWN0ZWQgREZTIHRhcmdldCB3aXRoIGFuCi0JICogZXJyb3Igb3RoZXIg
dGhhbiBTVEFUVVNfUEFUSF9OT1RfQ09WRVJFRCAoLUVSRU1PVEUpLCB0aGVuIHJldHJ5IGl0IGZy
b20gb3RoZXIgdGFyZ2V0cyBhcwotCSAqIHNwZWNpZmllZCBpbiBNUy1ERlNDICIzLjEuNS4yIEkv
TyBPcGVyYXRpb24gdG8gVGFyZ2V0IEZhaWxzIHdpdGggYW4gRXJyb3IgT3RoZXIgVGhhbgotCSAq
IFNUQVRVU19QQVRIX05PVF9DT1ZFUkVELiIKLQkgKi8KLQlmb3IgKHJjID0gLUVOT0VOVCwgdGl0
ID0gZGZzX2NhY2hlX2dldF90Z3RfaXRlcmF0b3IoJnRsKTsKLQkgICAgIHRpdDsgdGl0ID0gZGZz
X2NhY2hlX2dldF9uZXh0X3RndCgmdGwsIHRpdCkpIHsKLQkJcmMgPSBjb25uZWN0X2Rmc190YXJn
ZXQobW50X2N0eCwgZnVsbF9wYXRoLCBtbnRfY3R4LT5sZWFmX2Z1bGxwYXRoICsgMSwgdGl0KTsK
LQkJaWYgKCFyYykgewotCQkJcmMgPSBpc19wYXRoX3JlbW90ZShtbnRfY3R4KTsKLQkJCWlmICgh
cmMgfHwgcmMgPT0gLUVSRU1PVEUpCi0JCQkJYnJlYWs7Ci0JCX0KLQl9Ci0KLW91dDoKLQlrZnJl
ZShmdWxsX3BhdGgpOwotCWRmc19jYWNoZV9mcmVlX3RndHMoJnRsKTsKLQlyZXR1cm4gcmM7Ci19
Ci0KLXN0YXRpYyBpbnQgZm9sbG93X2Rmc19saW5rKHN0cnVjdCBjaWZzX21vdW50X2N0eCAqbW50
X2N0eCkKLXsKLQlpbnQgcmM7Ci0Jc3RydWN0IGNpZnNfc2JfaW5mbyAqY2lmc19zYiA9IG1udF9j
dHgtPmNpZnNfc2I7Ci0Jc3RydWN0IHNtYjNfZnNfY29udGV4dCAqY3R4ID0gbW50X2N0eC0+ZnNf
Y3R4OwotCWNoYXIgKmZ1bGxfcGF0aDsKLQlpbnQgbnVtX2xpbmtzID0gMDsKLQotCWZ1bGxfcGF0
aCA9IGJ1aWxkX3VuY19wYXRoX3RvX3Jvb3QoY3R4LCBjaWZzX3NiLCB0cnVlKTsKLQlpZiAoSVNf
RVJSKGZ1bGxfcGF0aCkpCi0JCXJldHVybiBQVFJfRVJSKGZ1bGxfcGF0aCk7Ci0KLQlrZnJlZSht
bnRfY3R4LT5vcmlnaW5fZnVsbHBhdGgpOwotCW1udF9jdHgtPm9yaWdpbl9mdWxscGF0aCA9IGRm
c19jYWNoZV9jYW5vbmljYWxfcGF0aChmdWxsX3BhdGgsIGNpZnNfc2ItPmxvY2FsX25scywKLQkJ
CQkJCQkgICAgY2lmc19yZW1hcChjaWZzX3NiKSk7Ci0Ja2ZyZWUoZnVsbF9wYXRoKTsKLQotCWlm
IChJU19FUlIobW50X2N0eC0+b3JpZ2luX2Z1bGxwYXRoKSkgewotCQlyYyA9IFBUUl9FUlIobW50
X2N0eC0+b3JpZ2luX2Z1bGxwYXRoKTsKLQkJbW50X2N0eC0+b3JpZ2luX2Z1bGxwYXRoID0gTlVM
TDsKLQkJcmV0dXJuIHJjOwotCX0KLQotCWRvIHsKLQkJcmMgPSBfX2ZvbGxvd19kZnNfbGluayht
bnRfY3R4KTsKLQkJaWYgKCFyYyB8fCByYyAhPSAtRVJFTU9URSkKLQkJCWJyZWFrOwotCX0gd2hp
bGUgKHJjID0gLUVMT09QLCArK251bV9saW5rcyA8IE1BWF9ORVNURURfTElOS1MpOwotCi0JcmV0
dXJuIHJjOwotfQotCi0vKiBTZXQgdXAgREZTIHJlZmVycmFsIHBhdGhzIGZvciBmYWlsb3ZlciAq
Lwotc3RhdGljIHZvaWQgc2V0dXBfc2VydmVyX3JlZmVycmFsX3BhdGhzKHN0cnVjdCBjaWZzX21v
dW50X2N0eCAqbW50X2N0eCkKLXsKLQlzdHJ1Y3QgVENQX1NlcnZlcl9JbmZvICpzZXJ2ZXIgPSBt
bnRfY3R4LT5zZXJ2ZXI7Ci0KLQltdXRleF9sb2NrKCZzZXJ2ZXItPnJlZnBhdGhfbG9jayk7Ci0J
c2VydmVyLT5vcmlnaW5fZnVsbHBhdGggPSBtbnRfY3R4LT5vcmlnaW5fZnVsbHBhdGg7Ci0Jc2Vy
dmVyLT5sZWFmX2Z1bGxwYXRoID0gbW50X2N0eC0+bGVhZl9mdWxscGF0aDsKLQlzZXJ2ZXItPmN1
cnJlbnRfZnVsbHBhdGggPSBtbnRfY3R4LT5sZWFmX2Z1bGxwYXRoOwotCW11dGV4X3VubG9jaygm
c2VydmVyLT5yZWZwYXRoX2xvY2spOwotCW1udF9jdHgtPm9yaWdpbl9mdWxscGF0aCA9IG1udF9j
dHgtPmxlYWZfZnVsbHBhdGggPSBOVUxMOwotfQotCiBpbnQgY2lmc19tb3VudChzdHJ1Y3QgY2lm
c19zYl9pbmZvICpjaWZzX3NiLCBzdHJ1Y3Qgc21iM19mc19jb250ZXh0ICpjdHgpCiB7Ci0JaW50
IHJjOwogCXN0cnVjdCBjaWZzX21vdW50X2N0eCBtbnRfY3R4ID0geyAuY2lmc19zYiA9IGNpZnNf
c2IsIC5mc19jdHggPSBjdHgsIH07Ci0Jc3RydWN0IGRmc19jYWNoZV90Z3RfbGlzdCB0bCA9IERG
U19DQUNIRV9UR1RfTElTVF9JTklUKHRsKTsKIAlib29sIGlzZGZzOworCWludCByYzsKIAotCXJj
ID0gaXNfZGZzX21vdW50KCZtbnRfY3R4LCAmaXNkZnMsICZ0bCk7CisJdXVpZF9nZW4oJm1udF9j
dHgubW91bnRfaWQpOworCXJjID0gZGZzX21vdW50X3NoYXJlKCZtbnRfY3R4LCAmaXNkZnMpOwog
CWlmIChyYykKIAkJZ290byBlcnJvcjsKIAlpZiAoIWlzZGZzKQogCQlnb3RvIG91dDsKIAotCS8q
IHByb2NlZWQgYXMgREZTIG1vdW50ICovCi0JdXVpZF9nZW4oJm1udF9jdHgubW91bnRfaWQpOwot
CXJjID0gY29ubmVjdF9kZnNfcm9vdCgmbW50X2N0eCwgJnRsKTsKLQlkZnNfY2FjaGVfZnJlZV90
Z3RzKCZ0bCk7Ci0KLQlpZiAocmMpCi0JCWdvdG8gZXJyb3I7Ci0KLQlyYyA9IGlzX3BhdGhfcmVt
b3RlKCZtbnRfY3R4KTsKLQlpZiAocmMpCi0JCXJjID0gZm9sbG93X2Rmc19saW5rKCZtbnRfY3R4
KTsKLQlpZiAocmMpCi0JCWdvdG8gZXJyb3I7Ci0KLQlzZXR1cF9zZXJ2ZXJfcmVmZXJyYWxfcGF0
aHMoJm1udF9jdHgpOwogCS8qCiAJICogQWZ0ZXIgcmVjb25uZWN0aW5nIHRvIGEgZGlmZmVyZW50
IHNlcnZlciwgdW5pcXVlIGlkcyB3b24ndCBtYXRjaCBhbnltb3JlLCBzbyB3ZSBkaXNhYmxlCiAJ
ICogc2VydmVyaW5vLiBUaGlzIHByZXZlbnRzIGRlbnRyeSByZXZhbGlkYXRpb24gdG8gdGhpbmsg
dGhlIGRlbnRyeSBhcmUgc3RhbGUgKEVTVEFMRSkuCkBAIC0zNzg2LDcgKzM0OTUsNyBAQCBpbnQg
Y2lmc19tb3VudChzdHJ1Y3QgY2lmc19zYl9pbmZvICpjaWZzX3NiLCBzdHJ1Y3Qgc21iM19mc19j
b250ZXh0ICpjdHgpCiAJZGZzX2NhY2hlX3B1dF9yZWZzcnZfc2Vzc2lvbnMoJm1udF9jdHgubW91
bnRfaWQpOwogCWtmcmVlKG1udF9jdHgub3JpZ2luX2Z1bGxwYXRoKTsKIAlrZnJlZShtbnRfY3R4
LmxlYWZfZnVsbHBhdGgpOwotCW1vdW50X3B1dF9jb25ucygmbW50X2N0eCk7CisJY2lmc19tb3Vu
dF9wdXRfY29ubnMoJm1udF9jdHgpOwogCXJldHVybiByYzsKIH0KICNlbHNlCkBAIC0zNzk1LDE3
ICszNTA0LDE5IEBAIGludCBjaWZzX21vdW50KHN0cnVjdCBjaWZzX3NiX2luZm8gKmNpZnNfc2Is
IHN0cnVjdCBzbWIzX2ZzX2NvbnRleHQgKmN0eCkKIAlpbnQgcmMgPSAwOwogCXN0cnVjdCBjaWZz
X21vdW50X2N0eCBtbnRfY3R4ID0geyAuY2lmc19zYiA9IGNpZnNfc2IsIC5mc19jdHggPSBjdHgs
IH07CiAKLQlyYyA9IG1vdW50X2dldF9jb25ucygmbW50X2N0eCk7CisJcmMgPSBjaWZzX21vdW50
X2dldF9zZXNzaW9uKCZtbnRfY3R4KTsKIAlpZiAocmMpCiAJCWdvdG8gZXJyb3I7CiAKLQlpZiAo
bW50X2N0eC50Y29uKSB7Ci0JCXJjID0gaXNfcGF0aF9yZW1vdGUoJm1udF9jdHgpOwotCQlpZiAo
cmMgPT0gLUVSRU1PVEUpCi0JCQlyYyA9IC1FT1BOT1RTVVBQOwotCQlpZiAocmMpCi0JCQlnb3Rv
IGVycm9yOwotCX0KKwlyYyA9IGNpZnNfbW91bnRfZ2V0X3Rjb24oJm1udF9jdHgpOworCWlmIChy
YykKKwkJZ290byBlcnJvcjsKKworCXJjID0gY2lmc19pc19wYXRoX3JlbW90ZSgmbW50X2N0eCk7
CisJaWYgKHJjID09IC1FUkVNT1RFKQorCQlyYyA9IC1FT1BOT1RTVVBQOworCWlmIChyYykKKwkJ
Z290byBlcnJvcjsKIAogCXJjID0gbW91bnRfc2V0dXBfdGxpbmsoY2lmc19zYiwgbW50X2N0eC5z
ZXMsIG1udF9jdHgudGNvbik7CiAJaWYgKHJjKQpAQCAtMzgxNSw3ICszNTI2LDcgQEAgaW50IGNp
ZnNfbW91bnQoc3RydWN0IGNpZnNfc2JfaW5mbyAqY2lmc19zYiwgc3RydWN0IHNtYjNfZnNfY29u
dGV4dCAqY3R4KQogCXJldHVybiByYzsKIAogZXJyb3I6Ci0JbW91bnRfcHV0X2Nvbm5zKCZtbnRf
Y3R4KTsKKwljaWZzX21vdW50X3B1dF9jb25ucygmbW50X2N0eCk7CiAJcmV0dXJuIHJjOwogfQog
I2VuZGlmCmRpZmYgLS1naXQgYS9mcy9jaWZzL2Rmcy5jIGIvZnMvY2lmcy9kZnMuYwppbmRleCBj
ZTIxNDM4Y2FkZWMuLjg4YTBjYWIzMzViNCAxMDA2NDQKLS0tIGEvZnMvY2lmcy9kZnMuYworKysg
Yi9mcy9jaWZzL2Rmcy5jCkBAIC0zLDYgKzMsNyBAQAogICogQ29weXJpZ2h0IChjKSAyMDIyIFBh
dWxvIEFsY2FudGFyYSA8cGFsY2FudGFyYUBzdXNlLmRlPgogICovCiAKKyNpbmNsdWRlIDxsaW51
eC9uYW1laS5oPgogI2luY2x1ZGUgImNpZnNwcm90by5oIgogI2luY2x1ZGUgImNpZnNfZGVidWcu
aCIKICNpbmNsdWRlICJkbnNfcmVzb2x2ZS5oIgpAQCAtNTIsMyArNTMsMjI4IEBAIGludCBkZnNf
cGFyc2VfdGFyZ2V0X3JlZmVycmFsKGNvbnN0IGNoYXIgKmZ1bGxfcGF0aCwgY29uc3Qgc3RydWN0
IGRmc19pbmZvM19wYXJhCiAJa2ZyZWUocGF0aCk7CiAJcmV0dXJuIHJjOwogfQorCisvKgorICog
Y2lmc19idWlsZF9wYXRoX3RvX3Jvb3QgcmV0dXJucyBmdWxsIHBhdGggdG8gcm9vdCB3aGVuIHdl
IGRvIG5vdCBoYXZlIGFuCisgKiBleGlzdGluZyBjb25uZWN0aW9uICh0Y29uKQorICovCitzdGF0
aWMgY2hhciAqYnVpbGRfdW5jX3BhdGhfdG9fcm9vdChjb25zdCBzdHJ1Y3Qgc21iM19mc19jb250
ZXh0ICpjdHgsCisJCQkJICAgIGNvbnN0IHN0cnVjdCBjaWZzX3NiX2luZm8gKmNpZnNfc2IsIGJv
b2wgdXNlcHBhdGgpCit7CisJY2hhciAqZnVsbF9wYXRoLCAqcG9zOworCXVuc2lnbmVkIGludCBw
cGxlbiA9IHVzZXBwYXRoICYmIGN0eC0+cHJlcGF0aCA/IHN0cmxlbihjdHgtPnByZXBhdGgpICsg
MSA6IDA7CisJdW5zaWduZWQgaW50IHVuY19sZW4gPSBzdHJubGVuKGN0eC0+VU5DLCBNQVhfVFJF
RV9TSVpFICsgMSk7CisKKwlpZiAodW5jX2xlbiA+IE1BWF9UUkVFX1NJWkUpCisJCXJldHVybiBF
UlJfUFRSKC1FSU5WQUwpOworCisJZnVsbF9wYXRoID0ga21hbGxvYyh1bmNfbGVuICsgcHBsZW4g
KyAxLCBHRlBfS0VSTkVMKTsKKwlpZiAoZnVsbF9wYXRoID09IE5VTEwpCisJCXJldHVybiBFUlJf
UFRSKC1FTk9NRU0pOworCisJbWVtY3B5KGZ1bGxfcGF0aCwgY3R4LT5VTkMsIHVuY19sZW4pOwor
CXBvcyA9IGZ1bGxfcGF0aCArIHVuY19sZW47CisKKwlpZiAocHBsZW4pIHsKKwkJKnBvcyA9IENJ
RlNfRElSX1NFUChjaWZzX3NiKTsKKwkJbWVtY3B5KHBvcyArIDEsIGN0eC0+cHJlcGF0aCwgcHBs
ZW4pOworCQlwb3MgKz0gcHBsZW47CisJfQorCisJKnBvcyA9ICdcMCc7IC8qIGFkZCB0cmFpbGlu
ZyBudWxsICovCisJY29udmVydF9kZWxpbWl0ZXIoZnVsbF9wYXRoLCBDSUZTX0RJUl9TRVAoY2lm
c19zYikpOworCWNpZnNfZGJnKEZZSSwgIiVzOiBmdWxsX3BhdGg9JXNcbiIsIF9fZnVuY19fLCBm
dWxsX3BhdGgpOworCXJldHVybiBmdWxsX3BhdGg7Cit9CisKK3N0YXRpYyBpbnQgZ2V0X3Nlc3Np
b24oc3RydWN0IGNpZnNfbW91bnRfY3R4ICptbnRfY3R4LCBjb25zdCBjaGFyICpmdWxsX3BhdGgp
Cit7CisJc3RydWN0IHNtYjNfZnNfY29udGV4dCAqY3R4ID0gbW50X2N0eC0+ZnNfY3R4OworCWlu
dCByYzsKKworCWN0eC0+bGVhZl9mdWxscGF0aCA9IChjaGFyICopZnVsbF9wYXRoOworCXJjID0g
Y2lmc19tb3VudF9nZXRfc2Vzc2lvbihtbnRfY3R4KTsKKwljdHgtPmxlYWZfZnVsbHBhdGggPSBO
VUxMOworCisJcmV0dXJuIHJjOworfQorCitzdGF0aWMgdm9pZCBzZXRfcm9vdF9zZXMoc3RydWN0
IGNpZnNfbW91bnRfY3R4ICptbnRfY3R4KQoreworCWlmIChtbnRfY3R4LT5zZXMpIHsKKwkJc3Bp
bl9sb2NrKCZjaWZzX3RjcF9zZXNfbG9jayk7CisJCW1udF9jdHgtPnNlcy0+c2VzX2NvdW50Kys7
CisJCXNwaW5fdW5sb2NrKCZjaWZzX3RjcF9zZXNfbG9jayk7CisJCWRmc19jYWNoZV9hZGRfcmVm
c3J2X3Nlc3Npb24oJm1udF9jdHgtPm1vdW50X2lkLCBtbnRfY3R4LT5zZXMpOworCX0KKwltbnRf
Y3R4LT5yb290X3NlcyA9IG1udF9jdHgtPnNlczsKK30KKworc3RhdGljIGludCBnZXRfZGZzX2Nv
bm4oc3RydWN0IGNpZnNfbW91bnRfY3R4ICptbnRfY3R4LCBjb25zdCBjaGFyICpyZWZfcGF0aCwg
Y29uc3QgY2hhciAqZnVsbF9wYXRoLAorCQkJY29uc3Qgc3RydWN0IGRmc19jYWNoZV90Z3RfaXRl
cmF0b3IgKnRpdCkKK3sKKwlzdHJ1Y3Qgc21iM19mc19jb250ZXh0ICpjdHggPSBtbnRfY3R4LT5m
c19jdHg7CisJc3RydWN0IGRmc19pbmZvM19wYXJhbSByZWYgPSB7fTsKKwlpbnQgcmM7CisKKwly
YyA9IGRmc19jYWNoZV9nZXRfdGd0X3JlZmVycmFsKHJlZl9wYXRoICsgMSwgdGl0LCAmcmVmKTsK
KwlpZiAocmMpCisJCXJldHVybiByYzsKKworCXJjID0gZGZzX3BhcnNlX3RhcmdldF9yZWZlcnJh
bChmdWxsX3BhdGggKyAxLCAmcmVmLCBjdHgpOworCWlmIChyYykKKwkJZ290byBvdXQ7CisKKwlj
aWZzX21vdW50X3B1dF9jb25ucyhtbnRfY3R4KTsKKwlyYyA9IGdldF9zZXNzaW9uKG1udF9jdHgs
IHJlZl9wYXRoKTsKKwlpZiAocmMpCisJCWdvdG8gb3V0OworCisJaWYgKHJlZi5mbGFncyAmIERG
U1JFRl9SRUZFUlJBTF9TRVJWRVIpCisJCXNldF9yb290X3NlcyhtbnRfY3R4KTsKKworCXJjID0g
LUVSRU1PVEU7CisJaWYgKHJlZi5mbGFncyAmIERGU1JFRl9TVE9SQUdFX1NFUlZFUikgeworCQly
YyA9IGNpZnNfbW91bnRfZ2V0X3Rjb24obW50X2N0eCk7CisJCWlmIChyYykKKwkJCWdvdG8gb3V0
OworCisJCS8qIHNvbWUgc2VydmVycyBtYXkgbm90IGFkdmVydGlzZSByZWZlcnJhbCBjYXBhYmls
aXR5IHVuZGVyIHJlZi5mbGFncyAqLworCQlpZiAoIShyZWYuZmxhZ3MgJiBERlNSRUZfUkVGRVJS
QUxfU0VSVkVSKSAmJgorCQkgICAgaXNfdGNvbl9kZnMobW50X2N0eC0+dGNvbikpCisJCQlzZXRf
cm9vdF9zZXMobW50X2N0eCk7CisKKwkJcmMgPSBjaWZzX2lzX3BhdGhfcmVtb3RlKG1udF9jdHgp
OworCX0KKworb3V0OgorCWZyZWVfZGZzX2luZm9fcGFyYW0oJnJlZik7CisJcmV0dXJuIHJjOwor
fQorCitzdGF0aWMgaW50IF9fZGZzX21vdW50X3NoYXJlKHN0cnVjdCBjaWZzX21vdW50X2N0eCAq
bW50X2N0eCkKK3sKKwlzdHJ1Y3QgY2lmc19zYl9pbmZvICpjaWZzX3NiID0gbW50X2N0eC0+Y2lm
c19zYjsKKwlzdHJ1Y3Qgc21iM19mc19jb250ZXh0ICpjdHggPSBtbnRfY3R4LT5mc19jdHg7CisJ
Y2hhciAqcmVmX3BhdGggPSBOVUxMLCAqZnVsbF9wYXRoID0gTlVMTDsKKwlzdHJ1Y3QgZGZzX2Nh
Y2hlX3RndF9pdGVyYXRvciAqdGl0OworCXN0cnVjdCBUQ1BfU2VydmVyX0luZm8gKnNlcnZlcjsK
KwljaGFyICpvcmlnaW5fZnVsbHBhdGggPSBOVUxMOworCWludCBudW1fbGlua3MgPSAwOworCWlu
dCByYzsKKworCXJlZl9wYXRoID0gZGZzX2dldF9wYXRoKGNpZnNfc2IsIGN0eC0+VU5DKTsKKwlp
ZiAoSVNfRVJSKHJlZl9wYXRoKSkKKwkJcmV0dXJuIFBUUl9FUlIocmVmX3BhdGgpOworCisJZnVs
bF9wYXRoID0gYnVpbGRfdW5jX3BhdGhfdG9fcm9vdChjdHgsIGNpZnNfc2IsIHRydWUpOworCWlm
IChJU19FUlIoZnVsbF9wYXRoKSkgeworCQlyYyA9IFBUUl9FUlIoZnVsbF9wYXRoKTsKKwkJZnVs
bF9wYXRoID0gTlVMTDsKKwkJZ290byBvdXQ7CisJfQorCisJb3JpZ2luX2Z1bGxwYXRoID0ga3N0
cmR1cChmdWxsX3BhdGgsIEdGUF9LRVJORUwpOworCWlmICghb3JpZ2luX2Z1bGxwYXRoKSB7CisJ
CXJjID0gLUVOT01FTTsKKwkJZ290byBvdXQ7CisJfQorCisJZG8geworCQlzdHJ1Y3QgZGZzX2Nh
Y2hlX3RndF9saXN0IHRsID0gREZTX0NBQ0hFX1RHVF9MSVNUX0lOSVQodGwpOworCisJCXJjID0g
ZGZzX2dldF9yZWZlcnJhbChtbnRfY3R4LCByZWZfcGF0aCArIDEsIE5VTEwsICZ0bCk7CisJCWlm
IChyYykKKwkJCWJyZWFrOworCisJCXRpdCA9IGRmc19jYWNoZV9nZXRfdGd0X2l0ZXJhdG9yKCZ0
bCk7CisJCWlmICghdGl0KSB7CisJCQljaWZzX2RiZyhWRlMsICIlczogZGZzIHJlZmVycmFsICgl
cykgd2l0aCBubyB0YXJnZXRzXG4iLCBfX2Z1bmNfXywKKwkJCQkgcmVmX3BhdGggKyAxKTsKKwkJ
CXJjID0gLUVOT0VOVDsKKwkJCWRmc19jYWNoZV9mcmVlX3RndHMoJnRsKTsKKwkJCWJyZWFrOwor
CQl9CisKKwkJZG8geworCQkJcmMgPSBnZXRfZGZzX2Nvbm4obW50X2N0eCwgcmVmX3BhdGgsIGZ1
bGxfcGF0aCwgdGl0KTsKKwkJCWlmICghcmMpCisJCQkJYnJlYWs7CisJCQlpZiAocmMgPT0gLUVS
RU1PVEUpIHsKKwkJCQlpZiAoKytudW1fbGlua3MgPiBNQVhfTkVTVEVEX0xJTktTKSB7CisJCQkJ
CXJjID0gLUVMT09QOworCQkJCQlicmVhazsKKwkJCQl9CisJCQkJa2ZyZWUocmVmX3BhdGgpOwor
CQkJCWtmcmVlKGZ1bGxfcGF0aCk7CisJCQkJcmVmX3BhdGggPSBmdWxsX3BhdGggPSBOVUxMOwor
CisJCQkJZnVsbF9wYXRoID0gYnVpbGRfdW5jX3BhdGhfdG9fcm9vdChjdHgsIGNpZnNfc2IsIHRy
dWUpOworCQkJCWlmIChJU19FUlIoZnVsbF9wYXRoKSkgeworCQkJCQlyYyA9IFBUUl9FUlIoZnVs
bF9wYXRoKTsKKwkJCQkJZnVsbF9wYXRoID0gTlVMTDsKKwkJCQl9IGVsc2UgeworCQkJCQlyZWZf
cGF0aCA9IGRmc19nZXRfcGF0aChjaWZzX3NiLCBmdWxsX3BhdGgpOworCQkJCQlpZiAoSVNfRVJS
KHJlZl9wYXRoKSkgeworCQkJCQkJcmMgPSBQVFJfRVJSKHJlZl9wYXRoKTsKKwkJCQkJCXJlZl9w
YXRoID0gTlVMTDsKKwkJCQkJfQorCQkJCX0KKwkJCQlicmVhazsKKwkJCX0KKwkJfSB3aGlsZSAo
KHRpdCA9IGRmc19jYWNoZV9nZXRfbmV4dF90Z3QoJnRsLCB0aXQpKSk7CisJCWRmc19jYWNoZV9m
cmVlX3RndHMoJnRsKTsKKwl9IHdoaWxlIChyYyA9PSAtRVJFTU9URSk7CisKKwlpZiAoIXJjKSB7
CisJCXNlcnZlciA9IG1udF9jdHgtPnNlcnZlcjsKKworCQltdXRleF9sb2NrKCZzZXJ2ZXItPnJl
ZnBhdGhfbG9jayk7CisJCXNlcnZlci0+b3JpZ2luX2Z1bGxwYXRoID0gb3JpZ2luX2Z1bGxwYXRo
OworCQlzZXJ2ZXItPmN1cnJlbnRfZnVsbHBhdGggPSBzZXJ2ZXItPmxlYWZfZnVsbHBhdGg7CisJ
CW11dGV4X3VubG9jaygmc2VydmVyLT5yZWZwYXRoX2xvY2spOworCQlvcmlnaW5fZnVsbHBhdGgg
PSBOVUxMOworCX0KKworb3V0OgorCWtmcmVlKG9yaWdpbl9mdWxscGF0aCk7CisJa2ZyZWUocmVm
X3BhdGgpOworCWtmcmVlKGZ1bGxfcGF0aCk7CisJcmV0dXJuIHJjOworfQorCitpbnQgZGZzX21v
dW50X3NoYXJlKHN0cnVjdCBjaWZzX21vdW50X2N0eCAqbW50X2N0eCwgYm9vbCAqaXNkZnMpCit7
CisJc3RydWN0IGNpZnNfc2JfaW5mbyAqY2lmc19zYiA9IG1udF9jdHgtPmNpZnNfc2I7CisJc3Ry
dWN0IHNtYjNfZnNfY29udGV4dCAqY3R4ID0gbW50X2N0eC0+ZnNfY3R4OworCWludCByYzsKKwor
CSppc2RmcyA9IGZhbHNlOworCisJcmMgPSBnZXRfc2Vzc2lvbihtbnRfY3R4LCBOVUxMKTsKKwlp
ZiAocmMpCisJCXJldHVybiByYzsKKwltbnRfY3R4LT5yb290X3NlcyA9IG1udF9jdHgtPnNlczsK
KwkvKgorCSAqIElmIGNhbGxlZCB3aXRoICdub2RmcycgbW91bnQgb3B0aW9uLCB0aGVuIHNraXAg
REZTIHJlc29sdmluZy4gIE90aGVyd2lzZSB1bmNvbmRpdGlvbmFsbHkKKwkgKiB0cnkgdG8gZ2V0
IGFuIERGUyByZWZlcnJhbCAoZXZlbiBjYWNoZWQpIHRvIGRldGVybWluZSB3aGV0aGVyIGl0IGlz
IGFuIERGUyBtb3VudC4KKwkgKgorCSAqIFNraXAgcHJlZml4IHBhdGggdG8gcHJvdmlkZSBzdXBw
b3J0IGZvciBERlMgcmVmZXJyYWxzIGZyb20gdzJrOCBzZXJ2ZXJzIHdoaWNoIGRvbid0IHNlZW0K
KwkgKiB0byByZXNwb25kIHdpdGggUEFUSF9OT1RfQ09WRVJFRCB0byByZXF1ZXN0cyB0aGF0IGlu
Y2x1ZGUgdGhlIHByZWZpeC4KKwkgKi8KKwlpZiAoKGNpZnNfc2ItPm1udF9jaWZzX2ZsYWdzICYg
Q0lGU19NT1VOVF9OT19ERlMpIHx8CisJICAgIGRmc19nZXRfcmVmZXJyYWwobW50X2N0eCwgY3R4
LT5VTkMgKyAxLCBOVUxMLCBOVUxMKSkgeworCQlyYyA9IGNpZnNfbW91bnRfZ2V0X3Rjb24obW50
X2N0eCk7CisJCWlmIChyYykKKwkJCXJldHVybiByYzsKKworCQlyYyA9IGNpZnNfaXNfcGF0aF9y
ZW1vdGUobW50X2N0eCk7CisJCWlmICghcmMgfHwgcmMgIT0gLUVSRU1PVEUpCisJCQlyZXR1cm4g
cmM7CisJfQorCisJKmlzZGZzID0gdHJ1ZTsKKwlzZXRfcm9vdF9zZXMobW50X2N0eCk7CisKKwly
ZXR1cm4gX19kZnNfbW91bnRfc2hhcmUobW50X2N0eCk7Cit9CmRpZmYgLS1naXQgYS9mcy9jaWZz
L2Rmcy5oIGIvZnMvY2lmcy9kZnMuaAppbmRleCBhZjA5OTAzYjQzNWEuLmJiZTJlYzI1YjBjMiAx
MDA2NDQKLS0tIGEvZnMvY2lmcy9kZnMuaAorKysgYi9mcy9jaWZzL2Rmcy5oCkBAIC04LDkgKzgs
MjQgQEAKIAogI2luY2x1ZGUgImNpZnNnbG9iLmgiCiAjaW5jbHVkZSAiZnNfY29udGV4dC5oIgor
I2luY2x1ZGUgImNpZnNfdW5pY29kZS5oIgogCiBpbnQgZGZzX3BhcnNlX3RhcmdldF9yZWZlcnJh
bChjb25zdCBjaGFyICpmdWxsX3BhdGgsIGNvbnN0IHN0cnVjdCBkZnNfaW5mbzNfcGFyYW0gKnJl
ZiwKIAkJCSAgICAgIHN0cnVjdCBzbWIzX2ZzX2NvbnRleHQgKmN0eCk7CitpbnQgZGZzX21vdW50
X3NoYXJlKHN0cnVjdCBjaWZzX21vdW50X2N0eCAqbW50X2N0eCwgYm9vbCAqaXNkZnMpOwogCitz
dGF0aWMgaW5saW5lIGNoYXIgKmRmc19nZXRfcGF0aChzdHJ1Y3QgY2lmc19zYl9pbmZvICpjaWZz
X3NiLCBjb25zdCBjaGFyICpwYXRoKQoreworCXJldHVybiBkZnNfY2FjaGVfY2Fub25pY2FsX3Bh
dGgocGF0aCwgY2lmc19zYi0+bG9jYWxfbmxzLCBjaWZzX3JlbWFwKGNpZnNfc2IpKTsKK30KKwor
c3RhdGljIGlubGluZSBpbnQgZGZzX2dldF9yZWZlcnJhbChzdHJ1Y3QgY2lmc19tb3VudF9jdHgg
Km1udF9jdHgsIGNvbnN0IGNoYXIgKnBhdGgsCisJCQkJICAgc3RydWN0IGRmc19pbmZvM19wYXJh
bSAqcmVmLCBzdHJ1Y3QgZGZzX2NhY2hlX3RndF9saXN0ICp0bCkKK3sKKwlzdHJ1Y3QgY2lmc19z
Yl9pbmZvICpjaWZzX3NiID0gbW50X2N0eC0+Y2lmc19zYjsKKworCXJldHVybiBkZnNfY2FjaGVf
ZmluZChtbnRfY3R4LT54aWQsIG1udF9jdHgtPnJvb3Rfc2VzLCBjaWZzX3NiLT5sb2NhbF9ubHMs
CisJCQkgICAgICBjaWZzX3JlbWFwKGNpZnNfc2IpLCBwYXRoLCByZWYsIHRsKTsKK30KIAogI2Vu
ZGlmIC8qIF9DSUZTX0RGU19IICovCmRpZmYgLS1naXQgYS9mcy9jaWZzL2Rmc19jYWNoZS5jIGIv
ZnMvY2lmcy9kZnNfY2FjaGUuYwppbmRleCAxN2I2ZDUzM2M5NjYuLmJmNWU2NzRmNDNiOCAxMDA2
NDQKLS0tIGEvZnMvY2lmcy9kZnNfY2FjaGUuYworKysgYi9mcy9jaWZzL2Rmc19jYWNoZS5jCkBA
IC0xNTE5LDEyICsxNTE5LDggQEAgc3RhdGljIHZvaWQgcmVmcmVzaF9tb3VudHMoc3RydWN0IGNp
ZnNfc2VzICoqc2Vzc2lvbnMpCiAKIAlzcGluX2xvY2soJmNpZnNfdGNwX3Nlc19sb2NrKTsKIAls
aXN0X2Zvcl9lYWNoX2VudHJ5KHNlcnZlciwgJmNpZnNfdGNwX3Nlc19saXN0LCB0Y3Bfc2VzX2xp
c3QpIHsKLQkJc3Bpbl9sb2NrKCZzZXJ2ZXItPnNydl9sb2NrKTsKLQkJaWYgKCFzZXJ2ZXItPmlz
X2Rmc19jb25uKSB7Ci0JCQlzcGluX3VubG9jaygmc2VydmVyLT5zcnZfbG9jayk7CisJCWlmICgh
c2VydmVyLT5sZWFmX2Z1bGxwYXRoKQogCQkJY29udGludWU7Ci0JCX0KLQkJc3Bpbl91bmxvY2so
JnNlcnZlci0+c3J2X2xvY2spOwogCiAJCWxpc3RfZm9yX2VhY2hfZW50cnkoc2VzLCAmc2VydmVy
LT5zbWJfc2VzX2xpc3QsIHNtYl9zZXNfbGlzdCkgewogCQkJbGlzdF9mb3JfZWFjaF9lbnRyeSh0
Y29uLCAmc2VzLT50Y29uX2xpc3QsIHRjb25fbGlzdCkgewpAQCAtMTU0NSwxMiArMTU0MSw4IEBA
IHN0YXRpYyB2b2lkIHJlZnJlc2hfbW91bnRzKHN0cnVjdCBjaWZzX3NlcyAqKnNlc3Npb25zKQog
CQlsaXN0X2RlbF9pbml0KCZ0Y29uLT51bGlzdCk7CiAKIAkJbXV0ZXhfbG9jaygmc2VydmVyLT5y
ZWZwYXRoX2xvY2spOwotCQlpZiAoc2VydmVyLT5vcmlnaW5fZnVsbHBhdGgpIHsKLQkJCWlmIChz
ZXJ2ZXItPmxlYWZfZnVsbHBhdGggJiYgc3RyY2FzZWNtcChzZXJ2ZXItPmxlYWZfZnVsbHBhdGgs
Ci0JCQkJCQkJCXNlcnZlci0+b3JpZ2luX2Z1bGxwYXRoKSkKLQkJCQlfX3JlZnJlc2hfdGNvbihz
ZXJ2ZXItPmxlYWZfZnVsbHBhdGggKyAxLCBzZXNzaW9ucywgdGNvbiwgZmFsc2UpOwotCQkJX19y
ZWZyZXNoX3Rjb24oc2VydmVyLT5vcmlnaW5fZnVsbHBhdGggKyAxLCBzZXNzaW9ucywgdGNvbiwg
ZmFsc2UpOwotCQl9CisJCWlmIChzZXJ2ZXItPmxlYWZfZnVsbHBhdGgpCisJCQlfX3JlZnJlc2hf
dGNvbihzZXJ2ZXItPmxlYWZfZnVsbHBhdGggKyAxLCBzZXNzaW9ucywgdGNvbiwgZmFsc2UpOwog
CQltdXRleF91bmxvY2soJnNlcnZlci0+cmVmcGF0aF9sb2NrKTsKIAogCQljaWZzX3B1dF90Y29u
KHRjb24pOwpkaWZmIC0tZ2l0IGEvZnMvY2lmcy9mc19jb250ZXh0LmMgYi9mcy9jaWZzL2ZzX2Nv
bnRleHQuYwppbmRleCA0MGZiZjQ2ODg2Y2MuLjZkMTNmODIwN2U5NiAxMDA2NDQKLS0tIGEvZnMv
Y2lmcy9mc19jb250ZXh0LmMKKysrIGIvZnMvY2lmcy9mc19jb250ZXh0LmMKQEAgLTMxNiw2ICsz
MTYsNyBAQCBzbWIzX2ZzX2NvbnRleHRfZHVwKHN0cnVjdCBzbWIzX2ZzX2NvbnRleHQgKm5ld19j
dHgsIHN0cnVjdCBzbWIzX2ZzX2NvbnRleHQgKmN0eAogCW5ld19jdHgtPlVOQyA9IE5VTEw7CiAJ
bmV3X2N0eC0+c291cmNlID0gTlVMTDsKIAluZXdfY3R4LT5pb2NoYXJzZXQgPSBOVUxMOworCW5l
d19jdHgtPmxlYWZfZnVsbHBhdGggPSBOVUxMOwogCS8qCiAJICogTWFrZSBzdXJlIHRvIHN0YXkg
aW4gc3luYyB3aXRoIHNtYjNfY2xlYW51cF9mc19jb250ZXh0X2NvbnRlbnRzKCkKIAkgKi8KQEAg
LTMyOCw2ICszMjksNyBAQCBzbWIzX2ZzX2NvbnRleHRfZHVwKHN0cnVjdCBzbWIzX2ZzX2NvbnRl
eHQgKm5ld19jdHgsIHN0cnVjdCBzbWIzX2ZzX2NvbnRleHQgKmN0eAogCURVUF9DVFhfU1RSKGRv
bWFpbm5hbWUpOwogCURVUF9DVFhfU1RSKG5vZGVuYW1lKTsKIAlEVVBfQ1RYX1NUUihpb2NoYXJz
ZXQpOworCURVUF9DVFhfU1RSKGxlYWZfZnVsbHBhdGgpOwogCiAJcmV0dXJuIDA7CiB9CkBAIC0x
NTkyLDYgKzE1OTQsOCBAQCBzbWIzX2NsZWFudXBfZnNfY29udGV4dF9jb250ZW50cyhzdHJ1Y3Qg
c21iM19mc19jb250ZXh0ICpjdHgpCiAJY3R4LT5pb2NoYXJzZXQgPSBOVUxMOwogCWtmcmVlKGN0
eC0+cHJlcGF0aCk7CiAJY3R4LT5wcmVwYXRoID0gTlVMTDsKKwlrZnJlZShjdHgtPmxlYWZfZnVs
bHBhdGgpOworCWN0eC0+bGVhZl9mdWxscGF0aCA9IE5VTEw7CiB9CiAKIHZvaWQKZGlmZiAtLWdp
dCBhL2ZzL2NpZnMvZnNfY29udGV4dC5oIGIvZnMvY2lmcy9mc19jb250ZXh0LmgKaW5kZXggMTU5
YmNmZDUwOWQ0Li40NGNiNTYzOWVkM2IgMTAwNjQ0Ci0tLSBhL2ZzL2NpZnMvZnNfY29udGV4dC5o
CisrKyBiL2ZzL2NpZnMvZnNfY29udGV4dC5oCkBAIC0yNjQsNiArMjY0LDcgQEAgc3RydWN0IHNt
YjNfZnNfY29udGV4dCB7CiAJX191MTYgY29tcHJlc3Npb247IC8qIGNvbXByZXNzaW9uIGFsZ29y
aXRobSAweEZGRkYgZGVmYXVsdCAwPWRpc2FibGVkICovCiAJYm9vbCByb290ZnM6MTsgLyogaWYg
aXQncyBhIFNNQiByb290IGZpbGUgc3lzdGVtICovCiAJYm9vbCB3aXRuZXNzOjE7IC8qIHVzZSB3
aXRuZXNzIHByb3RvY29sICovCisJY2hhciAqbGVhZl9mdWxscGF0aDsKIH07CiAKIGV4dGVybiBj
b25zdCBzdHJ1Y3QgZnNfcGFyYW1ldGVyX3NwZWMgc21iM19mc19wYXJhbWV0ZXJzW107Ci0tIAoy
LjM0LjEKCg==
--000000000000c05acd05f008405d--
